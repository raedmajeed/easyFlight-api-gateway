// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: admin_airline.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FlightTypeEnum int32

const (
	FlightTypeEnum_COMMERCIAL FlightTypeEnum = 0
	FlightTypeEnum_MILITARY   FlightTypeEnum = 1
	FlightTypeEnum_CARGO      FlightTypeEnum = 2
)

// Enum value maps for FlightTypeEnum.
var (
	FlightTypeEnum_name = map[int32]string{
		0: "COMMERCIAL",
		1: "MILITARY",
		2: "CARGO",
	}
	FlightTypeEnum_value = map[string]int32{
		"COMMERCIAL": 0,
		"MILITARY":   1,
		"CARGO":      2,
	}
)

func (x FlightTypeEnum) Enum() *FlightTypeEnum {
	p := new(FlightTypeEnum)
	*p = x
	return p
}

func (x FlightTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlightTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_admin_airline_proto_enumTypes[0].Descriptor()
}

func (FlightTypeEnum) Type() protoreflect.EnumType {
	return &file_admin_airline_proto_enumTypes[0]
}

func (x FlightTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlightTypeEnum.Descriptor instead.
func (FlightTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_admin_airline_proto_rawDescGZIP(), []int{0}
}

type Class int32

const (
	Class_ECONOMY  Class = 0
	Class_BUSINESS Class = 1
)

// Enum value maps for Class.
var (
	Class_name = map[int32]string{
		0: "ECONOMY",
		1: "BUSINESS",
	}
	Class_value = map[string]int32{
		"ECONOMY":  0,
		"BUSINESS": 1,
	}
)

func (x Class) Enum() *Class {
	p := new(Class)
	*p = x
	return p
}

func (x Class) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Class) Descriptor() protoreflect.EnumDescriptor {
	return file_admin_airline_proto_enumTypes[1].Descriptor()
}

func (Class) Type() protoreflect.EnumType {
	return &file_admin_airline_proto_enumTypes[1]
}

func (x Class) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Class.Descriptor instead.
func (Class) EnumDescriptor() ([]byte, []int) {
	return file_admin_airline_proto_rawDescGZIP(), []int{1}
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_airline_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_admin_airline_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_admin_airline_proto_rawDescGZIP(), []int{0}
}

func (x *Error) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type EmptyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyRequest) Reset() {
	*x = EmptyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_airline_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRequest) ProtoMessage() {}

func (x *EmptyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_airline_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRequest.ProtoReflect.Descriptor instead.
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return file_admin_airline_proto_rawDescGZIP(), []int{1}
}

type EmailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *EmailResponse) Reset() {
	*x = EmailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_airline_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailResponse) ProtoMessage() {}

func (x *EmailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_airline_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailResponse.ProtoReflect.Descriptor instead.
func (*EmailResponse) Descriptor() ([]byte, []int) {
	return file_admin_airline_proto_rawDescGZIP(), []int{2}
}

func (x *EmailResponse) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type OtpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email          string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	ExpirationTime string `protobuf:"bytes,2,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"`
}

func (x *OtpResponse) Reset() {
	*x = OtpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_airline_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtpResponse) ProtoMessage() {}

func (x *OtpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_airline_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtpResponse.ProtoReflect.Descriptor instead.
func (*OtpResponse) Descriptor() ([]byte, []int) {
	return file_admin_airline_proto_rawDescGZIP(), []int{3}
}

func (x *OtpResponse) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *OtpResponse) GetExpirationTime() string {
	if x != nil {
		return x.ExpirationTime
	}
	return ""
}

type IDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IDRequest) Reset() {
	*x = IDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_airline_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDRequest) ProtoMessage() {}

func (x *IDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_airline_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDRequest.ProtoReflect.Descriptor instead.
func (*IDRequest) Descriptor() ([]byte, []int) {
	return file_admin_airline_proto_rawDescGZIP(), []int{4}
}

func (x *IDRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type OTPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Otp   int32  `protobuf:"varint,1,opt,name=otp,proto3" json:"otp,omitempty"`
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *OTPRequest) Reset() {
	*x = OTPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_airline_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OTPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OTPRequest) ProtoMessage() {}

func (x *OTPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_airline_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OTPRequest.ProtoReflect.Descriptor instead.
func (*OTPRequest) Descriptor() ([]byte, []int) {
	return file_admin_airline_proto_rawDescGZIP(), []int{5}
}

func (x *OTPRequest) GetOtp() int32 {
	if x != nil {
		return x.Otp
	}
	return 0
}

func (x *OTPRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type LoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email    string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Role     string `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_airline_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_airline_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_admin_airline_proto_rawDescGZIP(), []int{6}
}

func (x *LoginRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *LoginRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *LoginRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type ConfirmPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password        string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	ConfirmPassword string `protobuf:"bytes,2,opt,name=confirm_password,json=confirmPassword,proto3" json:"confirm_password,omitempty"`
}

func (x *ConfirmPasswordRequest) Reset() {
	*x = ConfirmPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_airline_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmPasswordRequest) ProtoMessage() {}

func (x *ConfirmPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_airline_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmPasswordRequest.ProtoReflect.Descriptor instead.
func (*ConfirmPasswordRequest) Descriptor() ([]byte, []int) {
	return file_admin_airline_proto_rawDescGZIP(), []int{7}
}

func (x *ConfirmPasswordRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ConfirmPasswordRequest) GetConfirmPassword() string {
	if x != nil {
		return x.ConfirmPassword
	}
	return ""
}

type ForgotPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *ForgotPasswordRequest) Reset() {
	*x = ForgotPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_airline_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForgotPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForgotPasswordRequest) ProtoMessage() {}

func (x *ForgotPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_airline_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForgotPasswordRequest.ProtoReflect.Descriptor instead.
func (*ForgotPasswordRequest) Descriptor() ([]byte, []int) {
	return file_admin_airline_proto_rawDescGZIP(), []int{8}
}

func (x *ForgotPasswordRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type LoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *LoginResponse) Reset() {
	*x = LoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_airline_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponse) ProtoMessage() {}

func (x *LoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_airline_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponse.ProtoReflect.Descriptor instead.
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return file_admin_airline_proto_rawDescGZIP(), []int{9}
}

func (x *LoginResponse) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *LoginResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type FlightTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int32          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                FlightTypeEnum `protobuf:"varint,2,opt,name=type,proto3,enum=pb.FlightTypeEnum" json:"type,omitempty"`
	FlightModel         string         `protobuf:"bytes,3,opt,name=flight_model,json=flightModel,proto3" json:"flight_model,omitempty"`
	Description         string         `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	ManufacturerName    string         `protobuf:"bytes,5,opt,name=manufacturer_name,json=manufacturerName,proto3" json:"manufacturer_name,omitempty"`
	ManufacturerCountry string         `protobuf:"bytes,6,opt,name=manufacturer_country,json=manufacturerCountry,proto3" json:"manufacturer_country,omitempty"`
	MaxDistance         int32          `protobuf:"varint,7,opt,name=max_distance,json=maxDistance,proto3" json:"max_distance,omitempty"`
	CruiseSpeed         int32          `protobuf:"varint,8,opt,name=cruise_speed,json=cruiseSpeed,proto3" json:"cruise_speed,omitempty"`
}

func (x *FlightTypeRequest) Reset() {
	*x = FlightTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_airline_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlightTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightTypeRequest) ProtoMessage() {}

func (x *FlightTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_airline_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightTypeRequest.ProtoReflect.Descriptor instead.
func (*FlightTypeRequest) Descriptor() ([]byte, []int) {
	return file_admin_airline_proto_rawDescGZIP(), []int{10}
}

func (x *FlightTypeRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FlightTypeRequest) GetType() FlightTypeEnum {
	if x != nil {
		return x.Type
	}
	return FlightTypeEnum_COMMERCIAL
}

func (x *FlightTypeRequest) GetFlightModel() string {
	if x != nil {
		return x.FlightModel
	}
	return ""
}

func (x *FlightTypeRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FlightTypeRequest) GetManufacturerName() string {
	if x != nil {
		return x.ManufacturerName
	}
	return ""
}

func (x *FlightTypeRequest) GetManufacturerCountry() string {
	if x != nil {
		return x.ManufacturerCountry
	}
	return ""
}

func (x *FlightTypeRequest) GetMaxDistance() int32 {
	if x != nil {
		return x.MaxDistance
	}
	return 0
}

func (x *FlightTypeRequest) GetCruiseSpeed() int32 {
	if x != nil {
		return x.CruiseSpeed
	}
	return 0
}

type FlightTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlightType *FlightTypeRequest `protobuf:"bytes,1,opt,name=flight_type,json=flightType,proto3" json:"flight_type,omitempty"`
	Code       int32              `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message    string             `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Error      *Error             `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *FlightTypeResponse) Reset() {
	*x = FlightTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_airline_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlightTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightTypeResponse) ProtoMessage() {}

func (x *FlightTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_airline_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightTypeResponse.ProtoReflect.Descriptor instead.
func (*FlightTypeResponse) Descriptor() ([]byte, []int) {
	return file_admin_airline_proto_rawDescGZIP(), []int{11}
}

func (x *FlightTypeResponse) GetFlightType() *FlightTypeRequest {
	if x != nil {
		return x.FlightType
	}
	return nil
}

func (x *FlightTypeResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *FlightTypeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FlightTypeResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type FlightTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlightTypes []*FlightTypeRequest `protobuf:"bytes,1,rep,name=flight_types,json=flightTypes,proto3" json:"flight_types,omitempty"`
	Code        int32                `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message     string               `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Error       *Error               `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *FlightTypesResponse) Reset() {
	*x = FlightTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_airline_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlightTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightTypesResponse) ProtoMessage() {}

func (x *FlightTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_airline_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightTypesResponse.ProtoReflect.Descriptor instead.
func (*FlightTypesResponse) Descriptor() ([]byte, []int) {
	return file_admin_airline_proto_rawDescGZIP(), []int{12}
}

func (x *FlightTypesResponse) GetFlightTypes() []*FlightTypeRequest {
	if x != nil {
		return x.FlightTypes
	}
	return nil
}

func (x *FlightTypesResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *FlightTypesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FlightTypesResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type AirlineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AirlineName          string `protobuf:"bytes,2,opt,name=airline_name,json=airlineName,proto3" json:"airline_name,omitempty"`
	CompanyAddress       string `protobuf:"bytes,3,opt,name=company_address,json=companyAddress,proto3" json:"company_address,omitempty"`
	PhoneNumber          string `protobuf:"bytes,4,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Email                string `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	AirlineCode          string `protobuf:"bytes,6,opt,name=airline_code,json=airlineCode,proto3" json:"airline_code,omitempty"`
	AirlineLogoLink      string `protobuf:"bytes,7,opt,name=airline_logo_link,json=airlineLogoLink,proto3" json:"airline_logo_link,omitempty"`
	SupportDocumentsLink string `protobuf:"bytes,8,opt,name=support_documents_link,json=supportDocumentsLink,proto3" json:"support_documents_link,omitempty"`
}

func (x *AirlineRequest) Reset() {
	*x = AirlineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_airline_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirlineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirlineRequest) ProtoMessage() {}

func (x *AirlineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_airline_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirlineRequest.ProtoReflect.Descriptor instead.
func (*AirlineRequest) Descriptor() ([]byte, []int) {
	return file_admin_airline_proto_rawDescGZIP(), []int{13}
}

func (x *AirlineRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AirlineRequest) GetAirlineName() string {
	if x != nil {
		return x.AirlineName
	}
	return ""
}

func (x *AirlineRequest) GetCompanyAddress() string {
	if x != nil {
		return x.CompanyAddress
	}
	return ""
}

func (x *AirlineRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *AirlineRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *AirlineRequest) GetAirlineCode() string {
	if x != nil {
		return x.AirlineCode
	}
	return ""
}

func (x *AirlineRequest) GetAirlineLogoLink() string {
	if x != nil {
		return x.AirlineLogoLink
	}
	return ""
}

func (x *AirlineRequest) GetSupportDocumentsLink() string {
	if x != nil {
		return x.SupportDocumentsLink
	}
	return ""
}

type AirlineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Airline *AirlineRequest `protobuf:"bytes,1,opt,name=Airline,proto3" json:"Airline,omitempty"`
	Code    int32           `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Error   *Error          `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *AirlineResponse) Reset() {
	*x = AirlineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_airline_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirlineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirlineResponse) ProtoMessage() {}

func (x *AirlineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_airline_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirlineResponse.ProtoReflect.Descriptor instead.
func (*AirlineResponse) Descriptor() ([]byte, []int) {
	return file_admin_airline_proto_rawDescGZIP(), []int{14}
}

func (x *AirlineResponse) GetAirline() *AirlineRequest {
	if x != nil {
		return x.Airline
	}
	return nil
}

func (x *AirlineResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AirlineResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AirlineResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type AirlinesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Airlines []*AirlineRequest `protobuf:"bytes,1,rep,name=airlines,proto3" json:"airlines,omitempty"`
	Code     int32             `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message  string            `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Error    *Error            `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *AirlinesResponse) Reset() {
	*x = AirlinesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_airline_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirlinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirlinesResponse) ProtoMessage() {}

func (x *AirlinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_airline_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirlinesResponse.ProtoReflect.Descriptor instead.
func (*AirlinesResponse) Descriptor() ([]byte, []int) {
	return file_admin_airline_proto_rawDescGZIP(), []int{15}
}

func (x *AirlinesResponse) GetAirlines() []*AirlineRequest {
	if x != nil {
		return x.Airlines
	}
	return nil
}

func (x *AirlinesResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AirlinesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AirlinesResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type AirlineSeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AirlineId           int32 `protobuf:"varint,1,opt,name=airline_id,json=airlineId,proto3" json:"airline_id,omitempty"`
	EconomySeatNo       int32 `protobuf:"varint,2,opt,name=economy_seat_no,json=economySeatNo,proto3" json:"economy_seat_no,omitempty"`
	BuisinesSeatNo      int32 `protobuf:"varint,3,opt,name=buisines_seat_no,json=buisinesSeatNo,proto3" json:"buisines_seat_no,omitempty"`
	EconomySeatsPerRow  int32 `protobuf:"varint,4,opt,name=economy_seats_per_row,json=economySeatsPerRow,proto3" json:"economy_seats_per_row,omitempty"`
	BuisinesSeatsPerRow int32 `protobuf:"varint,5,opt,name=buisines_seats_per_row,json=buisinesSeatsPerRow,proto3" json:"buisines_seats_per_row,omitempty"`
}

func (x *AirlineSeatRequest) Reset() {
	*x = AirlineSeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_airline_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirlineSeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirlineSeatRequest) ProtoMessage() {}

func (x *AirlineSeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_airline_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirlineSeatRequest.ProtoReflect.Descriptor instead.
func (*AirlineSeatRequest) Descriptor() ([]byte, []int) {
	return file_admin_airline_proto_rawDescGZIP(), []int{16}
}

func (x *AirlineSeatRequest) GetAirlineId() int32 {
	if x != nil {
		return x.AirlineId
	}
	return 0
}

func (x *AirlineSeatRequest) GetEconomySeatNo() int32 {
	if x != nil {
		return x.EconomySeatNo
	}
	return 0
}

func (x *AirlineSeatRequest) GetBuisinesSeatNo() int32 {
	if x != nil {
		return x.BuisinesSeatNo
	}
	return 0
}

func (x *AirlineSeatRequest) GetEconomySeatsPerRow() int32 {
	if x != nil {
		return x.EconomySeatsPerRow
	}
	return 0
}

func (x *AirlineSeatRequest) GetBuisinesSeatsPerRow() int32 {
	if x != nil {
		return x.BuisinesSeatsPerRow
	}
	return 0
}

type AirlineSeatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AirlineSeat         *AirlineSeatRequest `protobuf:"bytes,1,opt,name=airline_seat,json=airlineSeat,proto3" json:"airline_seat,omitempty"`
	EconomySeatLayout   []byte              `protobuf:"bytes,2,opt,name=economy_seat_layout,json=economySeatLayout,proto3" json:"economy_seat_layout,omitempty"`
	BuisinessSeatLayout []byte              `protobuf:"bytes,3,opt,name=buisiness_seat_layout,json=buisinessSeatLayout,proto3" json:"buisiness_seat_layout,omitempty"`
	Code                int32               `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Message             string              `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	Error               *Error              `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *AirlineSeatResponse) Reset() {
	*x = AirlineSeatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_airline_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirlineSeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirlineSeatResponse) ProtoMessage() {}

func (x *AirlineSeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_airline_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirlineSeatResponse.ProtoReflect.Descriptor instead.
func (*AirlineSeatResponse) Descriptor() ([]byte, []int) {
	return file_admin_airline_proto_rawDescGZIP(), []int{17}
}

func (x *AirlineSeatResponse) GetAirlineSeat() *AirlineSeatRequest {
	if x != nil {
		return x.AirlineSeat
	}
	return nil
}

func (x *AirlineSeatResponse) GetEconomySeatLayout() []byte {
	if x != nil {
		return x.EconomySeatLayout
	}
	return nil
}

func (x *AirlineSeatResponse) GetBuisinessSeatLayout() []byte {
	if x != nil {
		return x.BuisinessSeatLayout
	}
	return nil
}

func (x *AirlineSeatResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AirlineSeatResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AirlineSeatResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type AirlineSeatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AirlineSeats []*AirlineSeatRequest `protobuf:"bytes,1,rep,name=airline_seats,json=airlineSeats,proto3" json:"airline_seats,omitempty"`
	Code         int32                 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message      string                `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Error        *Error                `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *AirlineSeatsResponse) Reset() {
	*x = AirlineSeatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_airline_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirlineSeatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirlineSeatsResponse) ProtoMessage() {}

func (x *AirlineSeatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_airline_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirlineSeatsResponse.ProtoReflect.Descriptor instead.
func (*AirlineSeatsResponse) Descriptor() ([]byte, []int) {
	return file_admin_airline_proto_rawDescGZIP(), []int{18}
}

func (x *AirlineSeatsResponse) GetAirlineSeats() []*AirlineSeatRequest {
	if x != nil {
		return x.AirlineSeats
	}
	return nil
}

func (x *AirlineSeatsResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AirlineSeatsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AirlineSeatsResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type AirlineBaggageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AirlineId           int32  `protobuf:"varint,1,opt,name=airline_id,json=airlineId,proto3" json:"airline_id,omitempty"`
	Class               Class  `protobuf:"varint,2,opt,name=class,proto3,enum=pb.Class" json:"class,omitempty"`
	CabinAllowedWeight  int32  `protobuf:"varint,3,opt,name=cabin_allowed_weight,json=cabinAllowedWeight,proto3" json:"cabin_allowed_weight,omitempty"`
	CabinAllowedLength  int32  `protobuf:"varint,4,opt,name=cabin_allowed_length,json=cabinAllowedLength,proto3" json:"cabin_allowed_length,omitempty"`
	CabinAllowedBreadth int32  `protobuf:"varint,5,opt,name=cabin_allowed_breadth,json=cabinAllowedBreadth,proto3" json:"cabin_allowed_breadth,omitempty"`
	CabinAllowedHeight  int32  `protobuf:"varint,6,opt,name=cabin_allowed_height,json=cabinAllowedHeight,proto3" json:"cabin_allowed_height,omitempty"`
	HandAllowedWeight   int32  `protobuf:"varint,7,opt,name=hand_allowed_weight,json=handAllowedWeight,proto3" json:"hand_allowed_weight,omitempty"`
	HandAllowedLength   int32  `protobuf:"varint,8,opt,name=hand_allowed_length,json=handAllowedLength,proto3" json:"hand_allowed_length,omitempty"`
	HandAllowedBreadth  int32  `protobuf:"varint,9,opt,name=hand_allowed_breadth,json=handAllowedBreadth,proto3" json:"hand_allowed_breadth,omitempty"`
	HandAllowedHeight   int32  `protobuf:"varint,10,opt,name=hand_allowed_height,json=handAllowedHeight,proto3" json:"hand_allowed_height,omitempty"`
	FeeForExtraKgCabin  int32  `protobuf:"varint,11,opt,name=fee_for_extra_kg_cabin,json=feeForExtraKgCabin,proto3" json:"fee_for_extra_kg_cabin,omitempty"`
	FeeForExtraKgHand   int32  `protobuf:"varint,12,opt,name=fee_for_extra_kg_hand,json=feeForExtraKgHand,proto3" json:"fee_for_extra_kg_hand,omitempty"`
	Restrictions        string `protobuf:"bytes,13,opt,name=restrictions,proto3" json:"restrictions,omitempty"`
}

func (x *AirlineBaggageRequest) Reset() {
	*x = AirlineBaggageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_airline_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirlineBaggageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirlineBaggageRequest) ProtoMessage() {}

func (x *AirlineBaggageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_airline_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirlineBaggageRequest.ProtoReflect.Descriptor instead.
func (*AirlineBaggageRequest) Descriptor() ([]byte, []int) {
	return file_admin_airline_proto_rawDescGZIP(), []int{19}
}

func (x *AirlineBaggageRequest) GetAirlineId() int32 {
	if x != nil {
		return x.AirlineId
	}
	return 0
}

func (x *AirlineBaggageRequest) GetClass() Class {
	if x != nil {
		return x.Class
	}
	return Class_ECONOMY
}

func (x *AirlineBaggageRequest) GetCabinAllowedWeight() int32 {
	if x != nil {
		return x.CabinAllowedWeight
	}
	return 0
}

func (x *AirlineBaggageRequest) GetCabinAllowedLength() int32 {
	if x != nil {
		return x.CabinAllowedLength
	}
	return 0
}

func (x *AirlineBaggageRequest) GetCabinAllowedBreadth() int32 {
	if x != nil {
		return x.CabinAllowedBreadth
	}
	return 0
}

func (x *AirlineBaggageRequest) GetCabinAllowedHeight() int32 {
	if x != nil {
		return x.CabinAllowedHeight
	}
	return 0
}

func (x *AirlineBaggageRequest) GetHandAllowedWeight() int32 {
	if x != nil {
		return x.HandAllowedWeight
	}
	return 0
}

func (x *AirlineBaggageRequest) GetHandAllowedLength() int32 {
	if x != nil {
		return x.HandAllowedLength
	}
	return 0
}

func (x *AirlineBaggageRequest) GetHandAllowedBreadth() int32 {
	if x != nil {
		return x.HandAllowedBreadth
	}
	return 0
}

func (x *AirlineBaggageRequest) GetHandAllowedHeight() int32 {
	if x != nil {
		return x.HandAllowedHeight
	}
	return 0
}

func (x *AirlineBaggageRequest) GetFeeForExtraKgCabin() int32 {
	if x != nil {
		return x.FeeForExtraKgCabin
	}
	return 0
}

func (x *AirlineBaggageRequest) GetFeeForExtraKgHand() int32 {
	if x != nil {
		return x.FeeForExtraKgHand
	}
	return 0
}

func (x *AirlineBaggageRequest) GetRestrictions() string {
	if x != nil {
		return x.Restrictions
	}
	return ""
}

type AirlineBaggageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AirlineBaggage *AirlineBaggageRequest `protobuf:"bytes,1,opt,name=airline_baggage,json=airlineBaggage,proto3" json:"airline_baggage,omitempty"`
}

func (x *AirlineBaggageResponse) Reset() {
	*x = AirlineBaggageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_airline_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirlineBaggageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirlineBaggageResponse) ProtoMessage() {}

func (x *AirlineBaggageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_airline_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirlineBaggageResponse.ProtoReflect.Descriptor instead.
func (*AirlineBaggageResponse) Descriptor() ([]byte, []int) {
	return file_admin_airline_proto_rawDescGZIP(), []int{20}
}

func (x *AirlineBaggageResponse) GetAirlineBaggage() *AirlineBaggageRequest {
	if x != nil {
		return x.AirlineBaggage
	}
	return nil
}

type AirlineBaggagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AirlineBaggages []*AirlineBaggageRequest `protobuf:"bytes,1,rep,name=airline_baggages,json=airlineBaggages,proto3" json:"airline_baggages,omitempty"`
	Code            int32                    `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message         string                   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Error           *Error                   `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *AirlineBaggagesResponse) Reset() {
	*x = AirlineBaggagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_airline_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirlineBaggagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirlineBaggagesResponse) ProtoMessage() {}

func (x *AirlineBaggagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_airline_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirlineBaggagesResponse.ProtoReflect.Descriptor instead.
func (*AirlineBaggagesResponse) Descriptor() ([]byte, []int) {
	return file_admin_airline_proto_rawDescGZIP(), []int{21}
}

func (x *AirlineBaggagesResponse) GetAirlineBaggages() []*AirlineBaggageRequest {
	if x != nil {
		return x.AirlineBaggages
	}
	return nil
}

func (x *AirlineBaggagesResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AirlineBaggagesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AirlineBaggagesResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type AirlineCancellationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AirlineId                       int32  `protobuf:"varint,1,opt,name=airline_id,json=airlineId,proto3" json:"airline_id,omitempty"`
	Class                           Class  `protobuf:"varint,2,opt,name=class,proto3,enum=pb.Class" json:"class,omitempty"`
	CancellationDeadlineBeforeHours uint32 `protobuf:"varint,3,opt,name=cancellation_deadline_before_hours,json=cancellationDeadlineBeforeHours,proto3" json:"cancellation_deadline_before_hours,omitempty"`
	CancellationPercentage          int32  `protobuf:"varint,4,opt,name=cancellation_percentage,json=cancellationPercentage,proto3" json:"cancellation_percentage,omitempty"`
	Refundable                      bool   `protobuf:"varint,5,opt,name=refundable,proto3" json:"refundable,omitempty"`
}

func (x *AirlineCancellationRequest) Reset() {
	*x = AirlineCancellationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_airline_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirlineCancellationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirlineCancellationRequest) ProtoMessage() {}

func (x *AirlineCancellationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_airline_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirlineCancellationRequest.ProtoReflect.Descriptor instead.
func (*AirlineCancellationRequest) Descriptor() ([]byte, []int) {
	return file_admin_airline_proto_rawDescGZIP(), []int{22}
}

func (x *AirlineCancellationRequest) GetAirlineId() int32 {
	if x != nil {
		return x.AirlineId
	}
	return 0
}

func (x *AirlineCancellationRequest) GetClass() Class {
	if x != nil {
		return x.Class
	}
	return Class_ECONOMY
}

func (x *AirlineCancellationRequest) GetCancellationDeadlineBeforeHours() uint32 {
	if x != nil {
		return x.CancellationDeadlineBeforeHours
	}
	return 0
}

func (x *AirlineCancellationRequest) GetCancellationPercentage() int32 {
	if x != nil {
		return x.CancellationPercentage
	}
	return 0
}

func (x *AirlineCancellationRequest) GetRefundable() bool {
	if x != nil {
		return x.Refundable
	}
	return false
}

type AirlineCancellationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AirlineCancellation *AirlineCancellationRequest `protobuf:"bytes,1,opt,name=airline_cancellation,json=airlineCancellation,proto3" json:"airline_cancellation,omitempty"`
}

func (x *AirlineCancellationResponse) Reset() {
	*x = AirlineCancellationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_airline_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirlineCancellationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirlineCancellationResponse) ProtoMessage() {}

func (x *AirlineCancellationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_airline_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirlineCancellationResponse.ProtoReflect.Descriptor instead.
func (*AirlineCancellationResponse) Descriptor() ([]byte, []int) {
	return file_admin_airline_proto_rawDescGZIP(), []int{23}
}

func (x *AirlineCancellationResponse) GetAirlineCancellation() *AirlineCancellationRequest {
	if x != nil {
		return x.AirlineCancellation
	}
	return nil
}

type AirlineCancellationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AirlineCancellations []*AirlineCancellationRequest `protobuf:"bytes,1,rep,name=airline_cancellations,json=airlineCancellations,proto3" json:"airline_cancellations,omitempty"`
	Code                 int32                         `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message              string                        `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Error                *Error                        `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *AirlineCancellationsResponse) Reset() {
	*x = AirlineCancellationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_airline_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirlineCancellationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirlineCancellationsResponse) ProtoMessage() {}

func (x *AirlineCancellationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_airline_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirlineCancellationsResponse.ProtoReflect.Descriptor instead.
func (*AirlineCancellationsResponse) Descriptor() ([]byte, []int) {
	return file_admin_airline_proto_rawDescGZIP(), []int{24}
}

func (x *AirlineCancellationsResponse) GetAirlineCancellations() []*AirlineCancellationRequest {
	if x != nil {
		return x.AirlineCancellations
	}
	return nil
}

func (x *AirlineCancellationsResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AirlineCancellationsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AirlineCancellationsResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type Airport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AirportCode  string  `protobuf:"bytes,1,opt,name=airport_code,json=airportCode,proto3" json:"airport_code,omitempty"`
	AirportName  string  `protobuf:"bytes,2,opt,name=airport_name,json=airportName,proto3" json:"airport_name,omitempty"`
	City         string  `protobuf:"bytes,3,opt,name=city,proto3" json:"city,omitempty"`
	Country      string  `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
	Region       string  `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	Latitude     float64 `protobuf:"fixed64,6,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude    float64 `protobuf:"fixed64,7,opt,name=longitude,proto3" json:"longitude,omitempty"`
	IataFcsCode  string  `protobuf:"bytes,8,opt,name=iata_fcs_code,json=iataFcsCode,proto3" json:"iata_fcs_code,omitempty"`
	IcaoCode     string  `protobuf:"bytes,9,opt,name=icao_code,json=icaoCode,proto3" json:"icao_code,omitempty"`
	Website      string  `protobuf:"bytes,10,opt,name=website,proto3" json:"website,omitempty"`
	ContactEmail string  `protobuf:"bytes,11,opt,name=contact_email,json=contactEmail,proto3" json:"contact_email,omitempty"`
	ContactPhone string  `protobuf:"bytes,12,opt,name=contact_phone,json=contactPhone,proto3" json:"contact_phone,omitempty"`
}

func (x *Airport) Reset() {
	*x = Airport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_airline_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Airport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Airport) ProtoMessage() {}

func (x *Airport) ProtoReflect() protoreflect.Message {
	mi := &file_admin_airline_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Airport.ProtoReflect.Descriptor instead.
func (*Airport) Descriptor() ([]byte, []int) {
	return file_admin_airline_proto_rawDescGZIP(), []int{25}
}

func (x *Airport) GetAirportCode() string {
	if x != nil {
		return x.AirportCode
	}
	return ""
}

func (x *Airport) GetAirportName() string {
	if x != nil {
		return x.AirportName
	}
	return ""
}

func (x *Airport) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Airport) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Airport) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Airport) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Airport) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Airport) GetIataFcsCode() string {
	if x != nil {
		return x.IataFcsCode
	}
	return ""
}

func (x *Airport) GetIcaoCode() string {
	if x != nil {
		return x.IcaoCode
	}
	return ""
}

func (x *Airport) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *Airport) GetContactEmail() string {
	if x != nil {
		return x.ContactEmail
	}
	return ""
}

func (x *Airport) GetContactPhone() string {
	if x != nil {
		return x.ContactPhone
	}
	return ""
}

type AirportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Airport *Airport `protobuf:"bytes,1,opt,name=airport,proto3" json:"airport,omitempty"`
}

func (x *AirportResponse) Reset() {
	*x = AirportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_airline_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirportResponse) ProtoMessage() {}

func (x *AirportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_airline_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirportResponse.ProtoReflect.Descriptor instead.
func (*AirportResponse) Descriptor() ([]byte, []int) {
	return file_admin_airline_proto_rawDescGZIP(), []int{26}
}

func (x *AirportResponse) GetAirport() *Airport {
	if x != nil {
		return x.Airport
	}
	return nil
}

type ScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DepartureTime    string `protobuf:"bytes,1,opt,name=departure_time,json=departureTime,proto3" json:"departure_time,omitempty"`
	ArrivalTime      string `protobuf:"bytes,2,opt,name=arrival_time,json=arrivalTime,proto3" json:"arrival_time,omitempty"`
	DepartureAirport string `protobuf:"bytes,3,opt,name=departure_airport,json=departureAirport,proto3" json:"departure_airport,omitempty"`
	ArrivalAirport   string `protobuf:"bytes,4,opt,name=arrival_airport,json=arrivalAirport,proto3" json:"arrival_airport,omitempty"`
	DepartureDate    string `protobuf:"bytes,5,opt,name=departure_date,json=departureDate,proto3" json:"departure_date,omitempty"`
	ArrivalDate      string `protobuf:"bytes,6,opt,name=arrival_date,json=arrivalDate,proto3" json:"arrival_date,omitempty"`
}

func (x *ScheduleRequest) Reset() {
	*x = ScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_airline_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleRequest) ProtoMessage() {}

func (x *ScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_airline_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleRequest.ProtoReflect.Descriptor instead.
func (*ScheduleRequest) Descriptor() ([]byte, []int) {
	return file_admin_airline_proto_rawDescGZIP(), []int{27}
}

func (x *ScheduleRequest) GetDepartureTime() string {
	if x != nil {
		return x.DepartureTime
	}
	return ""
}

func (x *ScheduleRequest) GetArrivalTime() string {
	if x != nil {
		return x.ArrivalTime
	}
	return ""
}

func (x *ScheduleRequest) GetDepartureAirport() string {
	if x != nil {
		return x.DepartureAirport
	}
	return ""
}

func (x *ScheduleRequest) GetArrivalAirport() string {
	if x != nil {
		return x.ArrivalAirport
	}
	return ""
}

func (x *ScheduleRequest) GetDepartureDate() string {
	if x != nil {
		return x.DepartureDate
	}
	return ""
}

func (x *ScheduleRequest) GetArrivalDate() string {
	if x != nil {
		return x.ArrivalDate
	}
	return ""
}

type ScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schedule *ScheduleRequest `protobuf:"bytes,1,opt,name=schedule,proto3" json:"schedule,omitempty"`
}

func (x *ScheduleResponse) Reset() {
	*x = ScheduleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_airline_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleResponse) ProtoMessage() {}

func (x *ScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_airline_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleResponse.ProtoReflect.Descriptor instead.
func (*ScheduleResponse) Descriptor() ([]byte, []int) {
	return file_admin_airline_proto_rawDescGZIP(), []int{28}
}

func (x *ScheduleResponse) GetSchedule() *ScheduleRequest {
	if x != nil {
		return x.Schedule
	}
	return nil
}

type FlightFleetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AirlineEmail         string `protobuf:"bytes,1,opt,name=airline_email,json=airlineEmail,proto3" json:"airline_email,omitempty"`
	SeatId               int32  `protobuf:"varint,2,opt,name=seat_id,json=seatId,proto3" json:"seat_id,omitempty"`
	FlightTypeId         int32  `protobuf:"varint,3,opt,name=flight_type_id,json=flightTypeId,proto3" json:"flight_type_id,omitempty"`
	BaggagePolicyId      int32  `protobuf:"varint,4,opt,name=baggage_policy_id,json=baggagePolicyId,proto3" json:"baggage_policy_id,omitempty"`
	CancellationPolicyId int32  `protobuf:"varint,5,opt,name=cancellation_policy_id,json=cancellationPolicyId,proto3" json:"cancellation_policy_id,omitempty"`
}

func (x *FlightFleetRequest) Reset() {
	*x = FlightFleetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_airline_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlightFleetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightFleetRequest) ProtoMessage() {}

func (x *FlightFleetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_airline_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightFleetRequest.ProtoReflect.Descriptor instead.
func (*FlightFleetRequest) Descriptor() ([]byte, []int) {
	return file_admin_airline_proto_rawDescGZIP(), []int{29}
}

func (x *FlightFleetRequest) GetAirlineEmail() string {
	if x != nil {
		return x.AirlineEmail
	}
	return ""
}

func (x *FlightFleetRequest) GetSeatId() int32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *FlightFleetRequest) GetFlightTypeId() int32 {
	if x != nil {
		return x.FlightTypeId
	}
	return 0
}

func (x *FlightFleetRequest) GetBaggagePolicyId() int32 {
	if x != nil {
		return x.BaggagePolicyId
	}
	return 0
}

func (x *FlightFleetRequest) GetCancellationPolicyId() int32 {
	if x != nil {
		return x.CancellationPolicyId
	}
	return 0
}

type FlightFleetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlightNumber         string `protobuf:"bytes,1,opt,name=flight_number,json=flightNumber,proto3" json:"flight_number,omitempty"`
	FlightTypeModel      string `protobuf:"bytes,2,opt,name=flight_type_model,json=flightTypeModel,proto3" json:"flight_type_model,omitempty"`
	AirlineName          string `protobuf:"bytes,3,opt,name=airline_name,json=airlineName,proto3" json:"airline_name,omitempty"`
	EconomySeatNumber    int32  `protobuf:"varint,4,opt,name=economy_seat_number,json=economySeatNumber,proto3" json:"economy_seat_number,omitempty"`
	BusisinessSeatNumber int32  `protobuf:"varint,5,opt,name=busisiness_seat_number,json=busisinessSeatNumber,proto3" json:"busisiness_seat_number,omitempty"`
}

func (x *FlightFleetResponse) Reset() {
	*x = FlightFleetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_airline_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlightFleetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightFleetResponse) ProtoMessage() {}

func (x *FlightFleetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_airline_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightFleetResponse.ProtoReflect.Descriptor instead.
func (*FlightFleetResponse) Descriptor() ([]byte, []int) {
	return file_admin_airline_proto_rawDescGZIP(), []int{30}
}

func (x *FlightFleetResponse) GetFlightNumber() string {
	if x != nil {
		return x.FlightNumber
	}
	return ""
}

func (x *FlightFleetResponse) GetFlightTypeModel() string {
	if x != nil {
		return x.FlightTypeModel
	}
	return ""
}

func (x *FlightFleetResponse) GetAirlineName() string {
	if x != nil {
		return x.AirlineName
	}
	return ""
}

func (x *FlightFleetResponse) GetEconomySeatNumber() int32 {
	if x != nil {
		return x.EconomySeatNumber
	}
	return 0
}

func (x *FlightFleetResponse) GetBusisinessSeatNumber() int32 {
	if x != nil {
		return x.BusisinessSeatNumber
	}
	return 0
}

type FlightChartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AirlineEmail  string `protobuf:"bytes,1,opt,name=airline_email,json=airlineEmail,proto3" json:"airline_email,omitempty"`
	FlightFleetId int32  `protobuf:"varint,2,opt,name=flight_fleet_id,json=flightFleetId,proto3" json:"flight_fleet_id,omitempty"`
	ScheduleId    int32  `protobuf:"varint,3,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
}

func (x *FlightChartRequest) Reset() {
	*x = FlightChartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_airline_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlightChartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightChartRequest) ProtoMessage() {}

func (x *FlightChartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_airline_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightChartRequest.ProtoReflect.Descriptor instead.
func (*FlightChartRequest) Descriptor() ([]byte, []int) {
	return file_admin_airline_proto_rawDescGZIP(), []int{31}
}

func (x *FlightChartRequest) GetAirlineEmail() string {
	if x != nil {
		return x.AirlineEmail
	}
	return ""
}

func (x *FlightChartRequest) GetFlightFleetId() int32 {
	if x != nil {
		return x.FlightFleetId
	}
	return 0
}

func (x *FlightChartRequest) GetScheduleId() int32 {
	if x != nil {
		return x.ScheduleId
	}
	return 0
}

type FlightChartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DepartureAirport string `protobuf:"bytes,1,opt,name=departure_airport,json=departureAirport,proto3" json:"departure_airport,omitempty"`
	ArrivalAirport   string `protobuf:"bytes,2,opt,name=arrival_airport,json=arrivalAirport,proto3" json:"arrival_airport,omitempty"`
	FlightNumber     string `protobuf:"bytes,3,opt,name=flight_number,json=flightNumber,proto3" json:"flight_number,omitempty"`
	FlightTypeModel  string `protobuf:"bytes,4,opt,name=flight_type_model,json=flightTypeModel,proto3" json:"flight_type_model,omitempty"`
	AirlineName      string `protobuf:"bytes,5,opt,name=airline_name,json=airlineName,proto3" json:"airline_name,omitempty"`
}

func (x *FlightChartResponse) Reset() {
	*x = FlightChartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_airline_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlightChartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightChartResponse) ProtoMessage() {}

func (x *FlightChartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_airline_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightChartResponse.ProtoReflect.Descriptor instead.
func (*FlightChartResponse) Descriptor() ([]byte, []int) {
	return file_admin_airline_proto_rawDescGZIP(), []int{32}
}

func (x *FlightChartResponse) GetDepartureAirport() string {
	if x != nil {
		return x.DepartureAirport
	}
	return ""
}

func (x *FlightChartResponse) GetArrivalAirport() string {
	if x != nil {
		return x.ArrivalAirport
	}
	return ""
}

func (x *FlightChartResponse) GetFlightNumber() string {
	if x != nil {
		return x.FlightNumber
	}
	return ""
}

func (x *FlightChartResponse) GetFlightTypeModel() string {
	if x != nil {
		return x.FlightTypeModel
	}
	return ""
}

func (x *FlightChartResponse) GetAirlineName() string {
	if x != nil {
		return x.AirlineName
	}
	return ""
}

var File_admin_airline_proto protoreflect.FileDescriptor

var file_admin_airline_proto_rawDesc = []byte{
	0x0a, 0x13, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x22, 0x35, 0x0a, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x0e, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x25, 0x0a, 0x0d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x4c, 0x0a, 0x0b, 0x4f, 0x74, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x27, 0x0a, 0x0f,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x1b, 0x0a, 0x09, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x34, 0x0a, 0x0a, 0x4f, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x74, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6f,
	0x74, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x54, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x5f,
	0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22,
	0x2d, 0x0a, 0x15, 0x46, 0x6f, 0x72, 0x67, 0x6f, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x3b,
	0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xb6, 0x02, 0x0a, 0x11,
	0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x11, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x6d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x75, 0x69, 0x73, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x72, 0x75, 0x69, 0x73, 0x65, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x12, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x66,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x9e, 0x01, 0x0a, 0x13, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x66, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0xaa, 0x02, 0x0a, 0x0e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x69,
	0x72, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x69, 0x72, 0x6c, 0x69,
	0x6e, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4c, 0x69, 0x6e, 0x6b,
	0x22, 0x8e, 0x01, 0x0a, 0x0f, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x41, 0x69, 0x72, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x91, 0x01, 0x0a, 0x10, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x69,
	0x72, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x61, 0x69,
	0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xed, 0x01, 0x0a, 0x12, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e,
	0x65, 0x53, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x65,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x53, 0x65, 0x61,
	0x74, 0x4e, 0x6f, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x75, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x61, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62,
	0x75, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x12, 0x31, 0x0a,
	0x15, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x65, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x53, 0x65, 0x61, 0x74, 0x73, 0x50, 0x65, 0x72, 0x52, 0x6f, 0x77,
	0x12, 0x33, 0x0a, 0x16, 0x62, 0x75, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x61,
	0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x13, 0x62, 0x75, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x53, 0x65, 0x61, 0x74, 0x73, 0x50,
	0x65, 0x72, 0x52, 0x6f, 0x77, 0x22, 0x83, 0x02, 0x0a, 0x13, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e,
	0x65, 0x53, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a,
	0x0c, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65,
	0x53, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x61, 0x69, 0x72,
	0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x61, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x53, 0x65,
	0x61, 0x74, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x62, 0x75, 0x69, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x62, 0x75, 0x69, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x53, 0x65, 0x61, 0x74, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xa2, 0x01, 0x0a, 0x14,
	0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x73, 0x65, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x62,
	0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0c, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x61, 0x74,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0xed, 0x04, 0x0a, 0x15, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x67, 0x67,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x69,
	0x72, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x05, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x61,
	0x62, 0x69, 0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63, 0x61, 0x62, 0x69, 0x6e, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x30, 0x0a, 0x14,
	0x63, 0x61, 0x62, 0x69, 0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63, 0x61, 0x62, 0x69,
	0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x32,
	0x0a, 0x15, 0x63, 0x61, 0x62, 0x69, 0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f,
	0x62, 0x72, 0x65, 0x61, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x63,
	0x61, 0x62, 0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x42, 0x72, 0x65, 0x61, 0x64,
	0x74, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x61, 0x62, 0x69, 0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x63, 0x61, 0x62, 0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x68, 0x61, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x68, 0x61, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x64, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x68, 0x61, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x42,
	0x72, 0x65, 0x61, 0x64, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x68, 0x61, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x32, 0x0a, 0x16, 0x66, 0x65, 0x65, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6b, 0x67, 0x5f, 0x63, 0x61, 0x62, 0x69, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x66, 0x65, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x4b, 0x67, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x15, 0x66, 0x65,
	0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6b, 0x67, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x66, 0x65, 0x65, 0x46, 0x6f,
	0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4b, 0x67, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x5c, 0x0a, 0x16, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x67, 0x67, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x61, 0x69,
	0x72, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x62, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65,
	0x42, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e,
	0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x22, 0xae,
	0x01, 0x0a, 0x17, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x67, 0x67, 0x61, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x61, 0x69,
	0x72, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x62, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e,
	0x65, 0x42, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0f, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x82, 0x02, 0x0a, 0x1a, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x4b,
	0x0a, 0x22, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x68,
	0x6f, 0x75, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x17, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x61, 0x62, 0x6c, 0x65, 0x22, 0x70, 0x0a, 0x1b, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x14, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x13, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc2, 0x01, 0x0a, 0x1c, 0x41, 0x69, 0x72, 0x6c, 0x69,
	0x6e, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x15, 0x61, 0x69, 0x72, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x69, 0x72, 0x6c,
	0x69, 0x6e, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x14, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xf4, 0x02, 0x0a, 0x07,
	0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x69, 0x72, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x69,
	0x72, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x69, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x61, 0x74, 0x61, 0x46, 0x63, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x63, 0x61, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x63, 0x61, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x22, 0x38, 0x0a, 0x0f, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x69, 0x72, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x07, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xfb, 0x01, 0x0a,
	0x0f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x69, 0x76,
	0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x72, 0x72, 0x69, 0x76,
	0x61, 0x6c, 0x5f, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x69, 0x76,
	0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x22, 0x43, 0x0a, 0x10, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f,
	0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22,
	0xda, 0x01, 0x0a, 0x12, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65,
	0x61, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x61,
	0x67, 0x67, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x62, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x22, 0xef, 0x01, 0x0a,
	0x13, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x69, 0x72,
	0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x53, 0x65,
	0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x62, 0x75, 0x73, 0x69,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x62, 0x75, 0x73, 0x69, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x82,
	0x01, 0x0a, 0x12, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x69,
	0x72, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x46, 0x6c, 0x65, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x64, 0x22, 0xdf, 0x01, 0x0a, 0x13, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x64,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x72, 0x72, 0x69,
	0x76, 0x61, 0x6c, 0x5f, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x2a, 0x39, 0x0a, 0x0e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4d, 0x4d, 0x45,
	0x52, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x49, 0x4c, 0x49, 0x54,
	0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x41, 0x52, 0x47, 0x4f, 0x10, 0x02,
	0x2a, 0x22, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x43, 0x4f,
	0x4e, 0x4f, 0x4d, 0x59, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45,
	0x53, 0x53, 0x10, 0x01, 0x32, 0xf5, 0x12, 0x0a, 0x0c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x69,
	0x72, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x43, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x2e, 0x70, 0x62,
	0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x13, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0f,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x2e, 0x70, 0x62, 0x2e,
	0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x10, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x2e,
	0x70, 0x62, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x69, 0x72,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x62,
	0x2e, 0x4f, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x10,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x12, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0c, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x69, 0x72,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x2e,
	0x70, 0x62, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x69, 0x72, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x19, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x54,
	0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x69,
	0x72, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x12, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x69, 0x72, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x13, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x61,
	0x74, 0x12, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65,
	0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x41,
	0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x42, 0x0a, 0x14, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x41, 0x69,
	0x72, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x61, 0x74, 0x73, 0x12, 0x10, 0x2e, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70,
	0x62, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x10, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41,
	0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x61, 0x74, 0x12, 0x0d, 0x2e, 0x70, 0x62, 0x2e,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x41,
	0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x44, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x69, 0x72, 0x6c,
	0x69, 0x6e, 0x65, 0x53, 0x65, 0x61, 0x74, 0x12, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x69, 0x72,
	0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x61, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x61, 0x74, 0x12, 0x0d, 0x2e,
	0x70, 0x62, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70,
	0x62, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x12,
	0x19, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x67, 0x67,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x2e,
	0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x17, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41,
	0x6c, 0x6c, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65,
	0x42, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x40, 0x0a, 0x13, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65,
	0x42, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x12, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x69, 0x72, 0x6c,
	0x69, 0x6e, 0x65, 0x42, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4d, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x69, 0x72, 0x6c,
	0x69, 0x6e, 0x65, 0x42, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e,
	0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69,
	0x6e, 0x65, 0x42, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x41, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x69, 0x72, 0x6c, 0x69,
	0x6e, 0x65, 0x42, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x12, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x69,
	0x72, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x1b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x1c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c,
	0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x69, 0x72, 0x6c,
	0x69, 0x6e, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x18, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x69,
	0x72, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x69, 0x72, 0x6c,
	0x69, 0x6e, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x70, 0x62, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3a, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x69, 0x72, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x41,
	0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x69, 0x72, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x17, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3b, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x62,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b,
	0x0a, 0x1d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x67, 0x6f, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x6f, 0x72, 0x67, 0x6f, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x2e,
	0x4f, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x18, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4f, 0x54, 0x50,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x54, 0x50,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x1e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x14, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x46, 0x6c, 0x65,
	0x65, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x46,
	0x6c, 0x65, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x62,
	0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x16, 0x2e, 0x70, 0x62,
	0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x03, 0x5a, 0x01,
	0x2e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_admin_airline_proto_rawDescOnce sync.Once
	file_admin_airline_proto_rawDescData = file_admin_airline_proto_rawDesc
)

func file_admin_airline_proto_rawDescGZIP() []byte {
	file_admin_airline_proto_rawDescOnce.Do(func() {
		file_admin_airline_proto_rawDescData = protoimpl.X.CompressGZIP(file_admin_airline_proto_rawDescData)
	})
	return file_admin_airline_proto_rawDescData
}

var file_admin_airline_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_admin_airline_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_admin_airline_proto_goTypes = []interface{}{
	(FlightTypeEnum)(0),                  // 0: pb.FlightTypeEnum
	(Class)(0),                           // 1: pb.Class
	(*Error)(nil),                        // 2: pb.Error
	(*EmptyRequest)(nil),                 // 3: pb.EmptyRequest
	(*EmailResponse)(nil),                // 4: pb.EmailResponse
	(*OtpResponse)(nil),                  // 5: pb.OtpResponse
	(*IDRequest)(nil),                    // 6: pb.IDRequest
	(*OTPRequest)(nil),                   // 7: pb.OTPRequest
	(*LoginRequest)(nil),                 // 8: pb.LoginRequest
	(*ConfirmPasswordRequest)(nil),       // 9: pb.ConfirmPasswordRequest
	(*ForgotPasswordRequest)(nil),        // 10: pb.ForgotPasswordRequest
	(*LoginResponse)(nil),                // 11: pb.LoginResponse
	(*FlightTypeRequest)(nil),            // 12: pb.FlightTypeRequest
	(*FlightTypeResponse)(nil),           // 13: pb.FlightTypeResponse
	(*FlightTypesResponse)(nil),          // 14: pb.FlightTypesResponse
	(*AirlineRequest)(nil),               // 15: pb.AirlineRequest
	(*AirlineResponse)(nil),              // 16: pb.AirlineResponse
	(*AirlinesResponse)(nil),             // 17: pb.AirlinesResponse
	(*AirlineSeatRequest)(nil),           // 18: pb.AirlineSeatRequest
	(*AirlineSeatResponse)(nil),          // 19: pb.AirlineSeatResponse
	(*AirlineSeatsResponse)(nil),         // 20: pb.AirlineSeatsResponse
	(*AirlineBaggageRequest)(nil),        // 21: pb.AirlineBaggageRequest
	(*AirlineBaggageResponse)(nil),       // 22: pb.AirlineBaggageResponse
	(*AirlineBaggagesResponse)(nil),      // 23: pb.AirlineBaggagesResponse
	(*AirlineCancellationRequest)(nil),   // 24: pb.AirlineCancellationRequest
	(*AirlineCancellationResponse)(nil),  // 25: pb.AirlineCancellationResponse
	(*AirlineCancellationsResponse)(nil), // 26: pb.AirlineCancellationsResponse
	(*Airport)(nil),                      // 27: pb.Airport
	(*AirportResponse)(nil),              // 28: pb.AirportResponse
	(*ScheduleRequest)(nil),              // 29: pb.ScheduleRequest
	(*ScheduleResponse)(nil),             // 30: pb.ScheduleResponse
	(*FlightFleetRequest)(nil),           // 31: pb.FlightFleetRequest
	(*FlightFleetResponse)(nil),          // 32: pb.FlightFleetResponse
	(*FlightChartRequest)(nil),           // 33: pb.FlightChartRequest
	(*FlightChartResponse)(nil),          // 34: pb.FlightChartResponse
}
var file_admin_airline_proto_depIdxs = []int32{
	0,  // 0: pb.FlightTypeRequest.type:type_name -> pb.FlightTypeEnum
	12, // 1: pb.FlightTypeResponse.flight_type:type_name -> pb.FlightTypeRequest
	2,  // 2: pb.FlightTypeResponse.error:type_name -> pb.Error
	12, // 3: pb.FlightTypesResponse.flight_types:type_name -> pb.FlightTypeRequest
	2,  // 4: pb.FlightTypesResponse.error:type_name -> pb.Error
	15, // 5: pb.AirlineResponse.Airline:type_name -> pb.AirlineRequest
	2,  // 6: pb.AirlineResponse.error:type_name -> pb.Error
	15, // 7: pb.AirlinesResponse.airlines:type_name -> pb.AirlineRequest
	2,  // 8: pb.AirlinesResponse.error:type_name -> pb.Error
	18, // 9: pb.AirlineSeatResponse.airline_seat:type_name -> pb.AirlineSeatRequest
	2,  // 10: pb.AirlineSeatResponse.error:type_name -> pb.Error
	18, // 11: pb.AirlineSeatsResponse.airline_seats:type_name -> pb.AirlineSeatRequest
	2,  // 12: pb.AirlineSeatsResponse.error:type_name -> pb.Error
	1,  // 13: pb.AirlineBaggageRequest.class:type_name -> pb.Class
	21, // 14: pb.AirlineBaggageResponse.airline_baggage:type_name -> pb.AirlineBaggageRequest
	21, // 15: pb.AirlineBaggagesResponse.airline_baggages:type_name -> pb.AirlineBaggageRequest
	2,  // 16: pb.AirlineBaggagesResponse.error:type_name -> pb.Error
	1,  // 17: pb.AirlineCancellationRequest.class:type_name -> pb.Class
	24, // 18: pb.AirlineCancellationResponse.airline_cancellation:type_name -> pb.AirlineCancellationRequest
	24, // 19: pb.AirlineCancellationsResponse.airline_cancellations:type_name -> pb.AirlineCancellationRequest
	2,  // 20: pb.AirlineCancellationsResponse.error:type_name -> pb.Error
	27, // 21: pb.AirportResponse.airport:type_name -> pb.Airport
	29, // 22: pb.ScheduleResponse.schedule:type_name -> pb.ScheduleRequest
	12, // 23: pb.AdminAirline.RegisterFlightType:input_type -> pb.FlightTypeRequest
	3,  // 24: pb.AdminAirline.FetchAllFlightTypes:input_type -> pb.EmptyRequest
	6,  // 25: pb.AdminAirline.FetchFlightType:input_type -> pb.IDRequest
	12, // 26: pb.AdminAirline.UpdateFlightType:input_type -> pb.FlightTypeRequest
	6,  // 27: pb.AdminAirline.DeleteFlightType:input_type -> pb.IDRequest
	15, // 28: pb.AdminAirline.RegisterAirline:input_type -> pb.AirlineRequest
	3,  // 29: pb.AdminAirline.FetchAllAirlines:input_type -> pb.EmptyRequest
	6,  // 30: pb.AdminAirline.FetchAirline:input_type -> pb.IDRequest
	15, // 31: pb.AdminAirline.UpdateAirline:input_type -> pb.AirlineRequest
	6,  // 32: pb.AdminAirline.DeleteAirline:input_type -> pb.IDRequest
	7,  // 33: pb.AdminAirline.VerifyAirlineRegistration:input_type -> pb.OTPRequest
	3,  // 34: pb.AdminAirline.AdminVerifyAirline:input_type -> pb.EmptyRequest
	18, // 35: pb.AdminAirline.RegisterAirlineSeat:input_type -> pb.AirlineSeatRequest
	3,  // 36: pb.AdminAirline.FetchAllAirlineSeats:input_type -> pb.EmptyRequest
	6,  // 37: pb.AdminAirline.FetchAirlineSeat:input_type -> pb.IDRequest
	18, // 38: pb.AdminAirline.UpdateAirlineSeat:input_type -> pb.AirlineSeatRequest
	6,  // 39: pb.AdminAirline.DeleteAirlineSeat:input_type -> pb.IDRequest
	21, // 40: pb.AdminAirline.RegisterAirlineBaggage:input_type -> pb.AirlineBaggageRequest
	3,  // 41: pb.AdminAirline.FetchAllAirlineBaggages:input_type -> pb.EmptyRequest
	6,  // 42: pb.AdminAirline.FetchAirlineBaggage:input_type -> pb.IDRequest
	21, // 43: pb.AdminAirline.UpdateAirlineBaggage:input_type -> pb.AirlineBaggageRequest
	6,  // 44: pb.AdminAirline.DeleteAirlineBaggage:input_type -> pb.IDRequest
	24, // 45: pb.AdminAirline.RegisterAirlineCancellation:input_type -> pb.AirlineCancellationRequest
	3,  // 46: pb.AdminAirline.FetchAllAirlineCancellations:input_type -> pb.EmptyRequest
	6,  // 47: pb.AdminAirline.FetchAirlineCancellation:input_type -> pb.IDRequest
	24, // 48: pb.AdminAirline.UpdateAirlineCancellation:input_type -> pb.AirlineCancellationRequest
	6,  // 49: pb.AdminAirline.DeleteAirlineCancellation:input_type -> pb.IDRequest
	27, // 50: pb.AdminAirline.RegisterAirportRequest:input_type -> pb.Airport
	29, // 51: pb.AdminAirline.RegisterScheduleRequest:input_type -> pb.ScheduleRequest
	8,  // 52: pb.AdminAirline.RegisterLoginRequest:input_type -> pb.LoginRequest
	10, // 53: pb.AdminAirline.RegisterForgotPasswordRequest:input_type -> pb.ForgotPasswordRequest
	7,  // 54: pb.AdminAirline.RegisterVerifyOTPRequest:input_type -> pb.OTPRequest
	9,  // 55: pb.AdminAirline.RegisterConfirmPasswordRequest:input_type -> pb.ConfirmPasswordRequest
	31, // 56: pb.AdminAirline.RegisterFlightFleets:input_type -> pb.FlightFleetRequest
	33, // 57: pb.AdminAirline.RegisterFlightChart:input_type -> pb.FlightChartRequest
	13, // 58: pb.AdminAirline.RegisterFlightType:output_type -> pb.FlightTypeResponse
	14, // 59: pb.AdminAirline.FetchAllFlightTypes:output_type -> pb.FlightTypesResponse
	13, // 60: pb.AdminAirline.FetchFlightType:output_type -> pb.FlightTypeResponse
	13, // 61: pb.AdminAirline.UpdateFlightType:output_type -> pb.FlightTypeResponse
	13, // 62: pb.AdminAirline.DeleteFlightType:output_type -> pb.FlightTypeResponse
	5,  // 63: pb.AdminAirline.RegisterAirline:output_type -> pb.OtpResponse
	17, // 64: pb.AdminAirline.FetchAllAirlines:output_type -> pb.AirlinesResponse
	16, // 65: pb.AdminAirline.FetchAirline:output_type -> pb.AirlineResponse
	16, // 66: pb.AdminAirline.UpdateAirline:output_type -> pb.AirlineResponse
	16, // 67: pb.AdminAirline.DeleteAirline:output_type -> pb.AirlineResponse
	16, // 68: pb.AdminAirline.VerifyAirlineRegistration:output_type -> pb.AirlineResponse
	16, // 69: pb.AdminAirline.AdminVerifyAirline:output_type -> pb.AirlineResponse
	19, // 70: pb.AdminAirline.RegisterAirlineSeat:output_type -> pb.AirlineSeatResponse
	20, // 71: pb.AdminAirline.FetchAllAirlineSeats:output_type -> pb.AirlineSeatsResponse
	19, // 72: pb.AdminAirline.FetchAirlineSeat:output_type -> pb.AirlineSeatResponse
	19, // 73: pb.AdminAirline.UpdateAirlineSeat:output_type -> pb.AirlineSeatResponse
	19, // 74: pb.AdminAirline.DeleteAirlineSeat:output_type -> pb.AirlineSeatResponse
	22, // 75: pb.AdminAirline.RegisterAirlineBaggage:output_type -> pb.AirlineBaggageResponse
	23, // 76: pb.AdminAirline.FetchAllAirlineBaggages:output_type -> pb.AirlineBaggagesResponse
	22, // 77: pb.AdminAirline.FetchAirlineBaggage:output_type -> pb.AirlineBaggageResponse
	22, // 78: pb.AdminAirline.UpdateAirlineBaggage:output_type -> pb.AirlineBaggageResponse
	22, // 79: pb.AdminAirline.DeleteAirlineBaggage:output_type -> pb.AirlineBaggageResponse
	25, // 80: pb.AdminAirline.RegisterAirlineCancellation:output_type -> pb.AirlineCancellationResponse
	26, // 81: pb.AdminAirline.FetchAllAirlineCancellations:output_type -> pb.AirlineCancellationsResponse
	25, // 82: pb.AdminAirline.FetchAirlineCancellation:output_type -> pb.AirlineCancellationResponse
	25, // 83: pb.AdminAirline.UpdateAirlineCancellation:output_type -> pb.AirlineCancellationResponse
	25, // 84: pb.AdminAirline.DeleteAirlineCancellation:output_type -> pb.AirlineCancellationResponse
	28, // 85: pb.AdminAirline.RegisterAirportRequest:output_type -> pb.AirportResponse
	30, // 86: pb.AdminAirline.RegisterScheduleRequest:output_type -> pb.ScheduleResponse
	11, // 87: pb.AdminAirline.RegisterLoginRequest:output_type -> pb.LoginResponse
	5,  // 88: pb.AdminAirline.RegisterForgotPasswordRequest:output_type -> pb.OtpResponse
	11, // 89: pb.AdminAirline.RegisterVerifyOTPRequest:output_type -> pb.LoginResponse
	4,  // 90: pb.AdminAirline.RegisterConfirmPasswordRequest:output_type -> pb.EmailResponse
	32, // 91: pb.AdminAirline.RegisterFlightFleets:output_type -> pb.FlightFleetResponse
	34, // 92: pb.AdminAirline.RegisterFlightChart:output_type -> pb.FlightChartResponse
	58, // [58:93] is the sub-list for method output_type
	23, // [23:58] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_admin_airline_proto_init() }
func file_admin_airline_proto_init() {
	if File_admin_airline_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_admin_airline_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_airline_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_airline_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_airline_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_airline_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_airline_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OTPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_airline_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_airline_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_airline_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForgotPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_airline_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_airline_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlightTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_airline_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlightTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_airline_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlightTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_airline_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirlineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_airline_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirlineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_airline_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirlinesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_airline_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirlineSeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_airline_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirlineSeatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_airline_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirlineSeatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_airline_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirlineBaggageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_airline_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirlineBaggageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_airline_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirlineBaggagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_airline_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirlineCancellationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_airline_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirlineCancellationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_airline_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirlineCancellationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_airline_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Airport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_airline_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_airline_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_airline_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_airline_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlightFleetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_airline_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlightFleetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_airline_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlightChartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_airline_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlightChartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_admin_airline_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_admin_airline_proto_goTypes,
		DependencyIndexes: file_admin_airline_proto_depIdxs,
		EnumInfos:         file_admin_airline_proto_enumTypes,
		MessageInfos:      file_admin_airline_proto_msgTypes,
	}.Build()
	File_admin_airline_proto = out.File
	file_admin_airline_proto_rawDesc = nil
	file_admin_airline_proto_goTypes = nil
	file_admin_airline_proto_depIdxs = nil
}
