// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: admin_airline.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AdminAirline_RegisterFlightType_FullMethodName  = "/pb.AdminAirline/RegisterFlightType"
	AdminAirline_FetchAllFlightTypes_FullMethodName = "/pb.AdminAirline/FetchAllFlightTypes"
	AdminAirline_FetchFlightType_FullMethodName     = "/pb.AdminAirline/FetchFlightType"
	AdminAirline_UpdateFlightType_FullMethodName    = "/pb.AdminAirline/UpdateFlightType"
	AdminAirline_DeleteFlightType_FullMethodName    = "/pb.AdminAirline/DeleteFlightType"
)

// AdminAirlineClient is the client API for AdminAirline service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminAirlineClient interface {
	// gRPC methods for all actions on Flight Typeclear
	RegisterFlightType(ctx context.Context, in *FlightTypeRequest, opts ...grpc.CallOption) (*FlightTypeResponse, error)
	FetchAllFlightTypes(ctx context.Context, in *FlightTypeRequest, opts ...grpc.CallOption) (*FlightTypesResponse, error)
	FetchFlightType(ctx context.Context, in *FlightTypeRequest, opts ...grpc.CallOption) (*FlightTypeResponse, error)
	UpdateFlightType(ctx context.Context, in *FlightTypeRequest, opts ...grpc.CallOption) (*FlightTypeResponse, error)
	DeleteFlightType(ctx context.Context, in *FlightTypeRequest, opts ...grpc.CallOption) (*FlightTypeResponse, error)
}

type adminAirlineClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminAirlineClient(cc grpc.ClientConnInterface) AdminAirlineClient {
	return &adminAirlineClient{cc}
}

func (c *adminAirlineClient) RegisterFlightType(ctx context.Context, in *FlightTypeRequest, opts ...grpc.CallOption) (*FlightTypeResponse, error) {
	out := new(FlightTypeResponse)
	err := c.cc.Invoke(ctx, AdminAirline_RegisterFlightType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAirlineClient) FetchAllFlightTypes(ctx context.Context, in *FlightTypeRequest, opts ...grpc.CallOption) (*FlightTypesResponse, error) {
	out := new(FlightTypesResponse)
	err := c.cc.Invoke(ctx, AdminAirline_FetchAllFlightTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAirlineClient) FetchFlightType(ctx context.Context, in *FlightTypeRequest, opts ...grpc.CallOption) (*FlightTypeResponse, error) {
	out := new(FlightTypeResponse)
	err := c.cc.Invoke(ctx, AdminAirline_FetchFlightType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAirlineClient) UpdateFlightType(ctx context.Context, in *FlightTypeRequest, opts ...grpc.CallOption) (*FlightTypeResponse, error) {
	out := new(FlightTypeResponse)
	err := c.cc.Invoke(ctx, AdminAirline_UpdateFlightType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAirlineClient) DeleteFlightType(ctx context.Context, in *FlightTypeRequest, opts ...grpc.CallOption) (*FlightTypeResponse, error) {
	out := new(FlightTypeResponse)
	err := c.cc.Invoke(ctx, AdminAirline_DeleteFlightType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminAirlineServer is the server API for AdminAirline service.
// All implementations must embed UnimplementedAdminAirlineServer
// for forward compatibility
type AdminAirlineServer interface {
	// gRPC methods for all actions on Flight Typeclear
	RegisterFlightType(context.Context, *FlightTypeRequest) (*FlightTypeResponse, error)
	FetchAllFlightTypes(context.Context, *FlightTypeRequest) (*FlightTypesResponse, error)
	FetchFlightType(context.Context, *FlightTypeRequest) (*FlightTypeResponse, error)
	UpdateFlightType(context.Context, *FlightTypeRequest) (*FlightTypeResponse, error)
	DeleteFlightType(context.Context, *FlightTypeRequest) (*FlightTypeResponse, error)
	mustEmbedUnimplementedAdminAirlineServer()
}

// UnimplementedAdminAirlineServer must be embedded to have forward compatible implementations.
type UnimplementedAdminAirlineServer struct {
}

func (UnimplementedAdminAirlineServer) RegisterFlightType(context.Context, *FlightTypeRequest) (*FlightTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterFlightType not implemented")
}
func (UnimplementedAdminAirlineServer) FetchAllFlightTypes(context.Context, *FlightTypeRequest) (*FlightTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAllFlightTypes not implemented")
}
func (UnimplementedAdminAirlineServer) FetchFlightType(context.Context, *FlightTypeRequest) (*FlightTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchFlightType not implemented")
}
func (UnimplementedAdminAirlineServer) UpdateFlightType(context.Context, *FlightTypeRequest) (*FlightTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlightType not implemented")
}
func (UnimplementedAdminAirlineServer) DeleteFlightType(context.Context, *FlightTypeRequest) (*FlightTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlightType not implemented")
}
func (UnimplementedAdminAirlineServer) mustEmbedUnimplementedAdminAirlineServer() {}

// UnsafeAdminAirlineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminAirlineServer will
// result in compilation errors.
type UnsafeAdminAirlineServer interface {
	mustEmbedUnimplementedAdminAirlineServer()
}

func RegisterAdminAirlineServer(s grpc.ServiceRegistrar, srv AdminAirlineServer) {
	s.RegisterService(&AdminAirline_ServiceDesc, srv)
}

func _AdminAirline_RegisterFlightType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlightTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).RegisterFlightType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminAirline_RegisterFlightType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).RegisterFlightType(ctx, req.(*FlightTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAirline_FetchAllFlightTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlightTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).FetchAllFlightTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminAirline_FetchAllFlightTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).FetchAllFlightTypes(ctx, req.(*FlightTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAirline_FetchFlightType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlightTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).FetchFlightType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminAirline_FetchFlightType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).FetchFlightType(ctx, req.(*FlightTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAirline_UpdateFlightType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlightTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).UpdateFlightType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminAirline_UpdateFlightType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).UpdateFlightType(ctx, req.(*FlightTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAirline_DeleteFlightType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlightTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).DeleteFlightType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminAirline_DeleteFlightType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).DeleteFlightType(ctx, req.(*FlightTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminAirline_ServiceDesc is the grpc.ServiceDesc for AdminAirline service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminAirline_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AdminAirline",
	HandlerType: (*AdminAirlineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterFlightType",
			Handler:    _AdminAirline_RegisterFlightType_Handler,
		},
		{
			MethodName: "FetchAllFlightTypes",
			Handler:    _AdminAirline_FetchAllFlightTypes_Handler,
		},
		{
			MethodName: "FetchFlightType",
			Handler:    _AdminAirline_FetchFlightType_Handler,
		},
		{
			MethodName: "UpdateFlightType",
			Handler:    _AdminAirline_UpdateFlightType_Handler,
		},
		{
			MethodName: "DeleteFlightType",
			Handler:    _AdminAirline_DeleteFlightType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin_airline.proto",
}
