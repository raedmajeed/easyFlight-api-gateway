// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: admin_airline.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminAirlineClient is the client API for AdminAirline service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminAirlineClient interface {
	// gRPC methods for all actions on Flight Type
	RegisterFlightType(ctx context.Context, in *FlightTypeRequest, opts ...grpc.CallOption) (*FlightTypeResponse, error)
	FetchAllFlightTypes(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*FlightTypesResponse, error)
	FetchFlightType(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*FlightTypeResponse, error)
	UpdateFlightType(ctx context.Context, in *FlightTypeRequest, opts ...grpc.CallOption) (*FlightTypeResponse, error)
	DeleteFlightType(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*FlightTypeResponse, error)
	// gRPC methods for all actions on Airline
	RegisterAirline(ctx context.Context, in *AirlineRequest, opts ...grpc.CallOption) (*OtpResponse, error)
	FetchAllAirlines(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AirlinesResponse, error)
	FetchAirline(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*AirlineResponse, error)
	UpdateAirline(ctx context.Context, in *AirlineRequest, opts ...grpc.CallOption) (*AirlineResponse, error)
	DeleteAirline(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*AirlineResponse, error)
	VerifyAirlineRegistration(ctx context.Context, in *OTPRequest, opts ...grpc.CallOption) (*AirlineResponse, error)
	AdminVerifyAirline(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AirlineResponse, error)
	// gRPC methods for all actions on Airline Seats
	RegisterAirlineSeat(ctx context.Context, in *AirlineSeatRequest, opts ...grpc.CallOption) (*AirlineSeatResponse, error)
	FetchAllAirlineSeats(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AirlineSeatsResponse, error)
	FetchAirlineSeat(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*AirlineSeatResponse, error)
	UpdateAirlineSeat(ctx context.Context, in *AirlineSeatRequest, opts ...grpc.CallOption) (*AirlineSeatResponse, error)
	DeleteAirlineSeat(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*AirlineSeatResponse, error)
	// gRPC methods for all actions on Airline Baggage
	RegisterAirlineBaggage(ctx context.Context, in *AirlineBaggageRequest, opts ...grpc.CallOption) (*AirlineBaggageResponse, error)
	FetchAllAirlineBaggages(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AirlineBaggagesResponse, error)
	FetchAirlineBaggage(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*AirlineBaggageResponse, error)
	UpdateAirlineBaggage(ctx context.Context, in *AirlineBaggageRequest, opts ...grpc.CallOption) (*AirlineBaggageResponse, error)
	DeleteAirlineBaggage(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*AirlineBaggageResponse, error)
	// gRPC methods for all actions on Airline Cancellation
	RegisterAirlineCancellation(ctx context.Context, in *AirlineCancellationRequest, opts ...grpc.CallOption) (*AirlineCancellationResponse, error)
	FetchAllAirlineCancellations(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AirlineCancellationsResponse, error)
	FetchAirlineCancellation(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*AirlineCancellationResponse, error)
	UpdateAirlineCancellation(ctx context.Context, in *AirlineCancellationRequest, opts ...grpc.CallOption) (*AirlineCancellationResponse, error)
	DeleteAirlineCancellation(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*AirlineCancellationResponse, error)
	// gRPC methods for all actions on Airport
	RegisterAirportRequest(ctx context.Context, in *Airport, opts ...grpc.CallOption) (*AirportResponse, error)
	// gRPC methods for all actions on Schedules
	RegisterScheduleRequest(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (*ScheduleResponse, error)
	// gRPC methods for all auth actions
	RegisterLoginRequest(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	RegisterForgotPasswordRequest(ctx context.Context, in *ForgotPasswordRequest, opts ...grpc.CallOption) (*OtpResponse, error)
	RegisterVerifyOTPRequest(ctx context.Context, in *OTPRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	RegisterConfirmPasswordRequest(ctx context.Context, in *ConfirmPasswordRequest, opts ...grpc.CallOption) (*EmailResponse, error)
	// gRPC methods for all flight fleet
	RegisterFlightFleets(ctx context.Context, in *FlightFleetRequest, opts ...grpc.CallOption) (*FlightFleetResponse, error)
	// gRPC methods for all flight chart
	RegisterFlightChart(ctx context.Context, in *FlightChartRequest, opts ...grpc.CallOption) (*FlightChartResponse, error)
}

type adminAirlineClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminAirlineClient(cc grpc.ClientConnInterface) AdminAirlineClient {
	return &adminAirlineClient{cc}
}

func (c *adminAirlineClient) RegisterFlightType(ctx context.Context, in *FlightTypeRequest, opts ...grpc.CallOption) (*FlightTypeResponse, error) {
	out := new(FlightTypeResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminAirline/RegisterFlightType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAirlineClient) FetchAllFlightTypes(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*FlightTypesResponse, error) {
	out := new(FlightTypesResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminAirline/FetchAllFlightTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAirlineClient) FetchFlightType(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*FlightTypeResponse, error) {
	out := new(FlightTypeResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminAirline/FetchFlightType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAirlineClient) UpdateFlightType(ctx context.Context, in *FlightTypeRequest, opts ...grpc.CallOption) (*FlightTypeResponse, error) {
	out := new(FlightTypeResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminAirline/UpdateFlightType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAirlineClient) DeleteFlightType(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*FlightTypeResponse, error) {
	out := new(FlightTypeResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminAirline/DeleteFlightType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAirlineClient) RegisterAirline(ctx context.Context, in *AirlineRequest, opts ...grpc.CallOption) (*OtpResponse, error) {
	out := new(OtpResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminAirline/RegisterAirline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAirlineClient) FetchAllAirlines(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AirlinesResponse, error) {
	out := new(AirlinesResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminAirline/FetchAllAirlines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAirlineClient) FetchAirline(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*AirlineResponse, error) {
	out := new(AirlineResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminAirline/FetchAirline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAirlineClient) UpdateAirline(ctx context.Context, in *AirlineRequest, opts ...grpc.CallOption) (*AirlineResponse, error) {
	out := new(AirlineResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminAirline/UpdateAirline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAirlineClient) DeleteAirline(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*AirlineResponse, error) {
	out := new(AirlineResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminAirline/DeleteAirline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAirlineClient) VerifyAirlineRegistration(ctx context.Context, in *OTPRequest, opts ...grpc.CallOption) (*AirlineResponse, error) {
	out := new(AirlineResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminAirline/VerifyAirlineRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAirlineClient) AdminVerifyAirline(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AirlineResponse, error) {
	out := new(AirlineResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminAirline/AdminVerifyAirline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAirlineClient) RegisterAirlineSeat(ctx context.Context, in *AirlineSeatRequest, opts ...grpc.CallOption) (*AirlineSeatResponse, error) {
	out := new(AirlineSeatResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminAirline/RegisterAirlineSeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAirlineClient) FetchAllAirlineSeats(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AirlineSeatsResponse, error) {
	out := new(AirlineSeatsResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminAirline/FetchAllAirlineSeats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAirlineClient) FetchAirlineSeat(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*AirlineSeatResponse, error) {
	out := new(AirlineSeatResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminAirline/FetchAirlineSeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAirlineClient) UpdateAirlineSeat(ctx context.Context, in *AirlineSeatRequest, opts ...grpc.CallOption) (*AirlineSeatResponse, error) {
	out := new(AirlineSeatResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminAirline/UpdateAirlineSeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAirlineClient) DeleteAirlineSeat(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*AirlineSeatResponse, error) {
	out := new(AirlineSeatResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminAirline/DeleteAirlineSeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAirlineClient) RegisterAirlineBaggage(ctx context.Context, in *AirlineBaggageRequest, opts ...grpc.CallOption) (*AirlineBaggageResponse, error) {
	out := new(AirlineBaggageResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminAirline/RegisterAirlineBaggage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAirlineClient) FetchAllAirlineBaggages(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AirlineBaggagesResponse, error) {
	out := new(AirlineBaggagesResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminAirline/FetchAllAirlineBaggages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAirlineClient) FetchAirlineBaggage(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*AirlineBaggageResponse, error) {
	out := new(AirlineBaggageResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminAirline/FetchAirlineBaggage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAirlineClient) UpdateAirlineBaggage(ctx context.Context, in *AirlineBaggageRequest, opts ...grpc.CallOption) (*AirlineBaggageResponse, error) {
	out := new(AirlineBaggageResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminAirline/UpdateAirlineBaggage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAirlineClient) DeleteAirlineBaggage(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*AirlineBaggageResponse, error) {
	out := new(AirlineBaggageResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminAirline/DeleteAirlineBaggage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAirlineClient) RegisterAirlineCancellation(ctx context.Context, in *AirlineCancellationRequest, opts ...grpc.CallOption) (*AirlineCancellationResponse, error) {
	out := new(AirlineCancellationResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminAirline/RegisterAirlineCancellation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAirlineClient) FetchAllAirlineCancellations(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AirlineCancellationsResponse, error) {
	out := new(AirlineCancellationsResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminAirline/FetchAllAirlineCancellations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAirlineClient) FetchAirlineCancellation(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*AirlineCancellationResponse, error) {
	out := new(AirlineCancellationResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminAirline/FetchAirlineCancellation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAirlineClient) UpdateAirlineCancellation(ctx context.Context, in *AirlineCancellationRequest, opts ...grpc.CallOption) (*AirlineCancellationResponse, error) {
	out := new(AirlineCancellationResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminAirline/UpdateAirlineCancellation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAirlineClient) DeleteAirlineCancellation(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*AirlineCancellationResponse, error) {
	out := new(AirlineCancellationResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminAirline/DeleteAirlineCancellation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAirlineClient) RegisterAirportRequest(ctx context.Context, in *Airport, opts ...grpc.CallOption) (*AirportResponse, error) {
	out := new(AirportResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminAirline/RegisterAirportRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAirlineClient) RegisterScheduleRequest(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (*ScheduleResponse, error) {
	out := new(ScheduleResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminAirline/RegisterScheduleRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAirlineClient) RegisterLoginRequest(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminAirline/RegisterLoginRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAirlineClient) RegisterForgotPasswordRequest(ctx context.Context, in *ForgotPasswordRequest, opts ...grpc.CallOption) (*OtpResponse, error) {
	out := new(OtpResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminAirline/RegisterForgotPasswordRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAirlineClient) RegisterVerifyOTPRequest(ctx context.Context, in *OTPRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminAirline/RegisterVerifyOTPRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAirlineClient) RegisterConfirmPasswordRequest(ctx context.Context, in *ConfirmPasswordRequest, opts ...grpc.CallOption) (*EmailResponse, error) {
	out := new(EmailResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminAirline/RegisterConfirmPasswordRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAirlineClient) RegisterFlightFleets(ctx context.Context, in *FlightFleetRequest, opts ...grpc.CallOption) (*FlightFleetResponse, error) {
	out := new(FlightFleetResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminAirline/RegisterFlightFleets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAirlineClient) RegisterFlightChart(ctx context.Context, in *FlightChartRequest, opts ...grpc.CallOption) (*FlightChartResponse, error) {
	out := new(FlightChartResponse)
	err := c.cc.Invoke(ctx, "/pb.AdminAirline/RegisterFlightChart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminAirlineServer is the server API for AdminAirline service.
// All implementations must embed UnimplementedAdminAirlineServer
// for forward compatibility
type AdminAirlineServer interface {
	// gRPC methods for all actions on Flight Type
	RegisterFlightType(context.Context, *FlightTypeRequest) (*FlightTypeResponse, error)
	FetchAllFlightTypes(context.Context, *EmptyRequest) (*FlightTypesResponse, error)
	FetchFlightType(context.Context, *IDRequest) (*FlightTypeResponse, error)
	UpdateFlightType(context.Context, *FlightTypeRequest) (*FlightTypeResponse, error)
	DeleteFlightType(context.Context, *IDRequest) (*FlightTypeResponse, error)
	// gRPC methods for all actions on Airline
	RegisterAirline(context.Context, *AirlineRequest) (*OtpResponse, error)
	FetchAllAirlines(context.Context, *EmptyRequest) (*AirlinesResponse, error)
	FetchAirline(context.Context, *IDRequest) (*AirlineResponse, error)
	UpdateAirline(context.Context, *AirlineRequest) (*AirlineResponse, error)
	DeleteAirline(context.Context, *IDRequest) (*AirlineResponse, error)
	VerifyAirlineRegistration(context.Context, *OTPRequest) (*AirlineResponse, error)
	AdminVerifyAirline(context.Context, *EmptyRequest) (*AirlineResponse, error)
	// gRPC methods for all actions on Airline Seats
	RegisterAirlineSeat(context.Context, *AirlineSeatRequest) (*AirlineSeatResponse, error)
	FetchAllAirlineSeats(context.Context, *EmptyRequest) (*AirlineSeatsResponse, error)
	FetchAirlineSeat(context.Context, *IDRequest) (*AirlineSeatResponse, error)
	UpdateAirlineSeat(context.Context, *AirlineSeatRequest) (*AirlineSeatResponse, error)
	DeleteAirlineSeat(context.Context, *IDRequest) (*AirlineSeatResponse, error)
	// gRPC methods for all actions on Airline Baggage
	RegisterAirlineBaggage(context.Context, *AirlineBaggageRequest) (*AirlineBaggageResponse, error)
	FetchAllAirlineBaggages(context.Context, *EmptyRequest) (*AirlineBaggagesResponse, error)
	FetchAirlineBaggage(context.Context, *IDRequest) (*AirlineBaggageResponse, error)
	UpdateAirlineBaggage(context.Context, *AirlineBaggageRequest) (*AirlineBaggageResponse, error)
	DeleteAirlineBaggage(context.Context, *IDRequest) (*AirlineBaggageResponse, error)
	// gRPC methods for all actions on Airline Cancellation
	RegisterAirlineCancellation(context.Context, *AirlineCancellationRequest) (*AirlineCancellationResponse, error)
	FetchAllAirlineCancellations(context.Context, *EmptyRequest) (*AirlineCancellationsResponse, error)
	FetchAirlineCancellation(context.Context, *IDRequest) (*AirlineCancellationResponse, error)
	UpdateAirlineCancellation(context.Context, *AirlineCancellationRequest) (*AirlineCancellationResponse, error)
	DeleteAirlineCancellation(context.Context, *IDRequest) (*AirlineCancellationResponse, error)
	// gRPC methods for all actions on Airport
	RegisterAirportRequest(context.Context, *Airport) (*AirportResponse, error)
	// gRPC methods for all actions on Schedules
	RegisterScheduleRequest(context.Context, *ScheduleRequest) (*ScheduleResponse, error)
	// gRPC methods for all auth actions
	RegisterLoginRequest(context.Context, *LoginRequest) (*LoginResponse, error)
	RegisterForgotPasswordRequest(context.Context, *ForgotPasswordRequest) (*OtpResponse, error)
	RegisterVerifyOTPRequest(context.Context, *OTPRequest) (*LoginResponse, error)
	RegisterConfirmPasswordRequest(context.Context, *ConfirmPasswordRequest) (*EmailResponse, error)
	// gRPC methods for all flight fleet
	RegisterFlightFleets(context.Context, *FlightFleetRequest) (*FlightFleetResponse, error)
	// gRPC methods for all flight chart
	RegisterFlightChart(context.Context, *FlightChartRequest) (*FlightChartResponse, error)
	mustEmbedUnimplementedAdminAirlineServer()
}

// UnimplementedAdminAirlineServer must be embedded to have forward compatible implementations.
type UnimplementedAdminAirlineServer struct {
}

func (UnimplementedAdminAirlineServer) RegisterFlightType(context.Context, *FlightTypeRequest) (*FlightTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterFlightType not implemented")
}
func (UnimplementedAdminAirlineServer) FetchAllFlightTypes(context.Context, *EmptyRequest) (*FlightTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAllFlightTypes not implemented")
}
func (UnimplementedAdminAirlineServer) FetchFlightType(context.Context, *IDRequest) (*FlightTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchFlightType not implemented")
}
func (UnimplementedAdminAirlineServer) UpdateFlightType(context.Context, *FlightTypeRequest) (*FlightTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlightType not implemented")
}
func (UnimplementedAdminAirlineServer) DeleteFlightType(context.Context, *IDRequest) (*FlightTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlightType not implemented")
}
func (UnimplementedAdminAirlineServer) RegisterAirline(context.Context, *AirlineRequest) (*OtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAirline not implemented")
}
func (UnimplementedAdminAirlineServer) FetchAllAirlines(context.Context, *EmptyRequest) (*AirlinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAllAirlines not implemented")
}
func (UnimplementedAdminAirlineServer) FetchAirline(context.Context, *IDRequest) (*AirlineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAirline not implemented")
}
func (UnimplementedAdminAirlineServer) UpdateAirline(context.Context, *AirlineRequest) (*AirlineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAirline not implemented")
}
func (UnimplementedAdminAirlineServer) DeleteAirline(context.Context, *IDRequest) (*AirlineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAirline not implemented")
}
func (UnimplementedAdminAirlineServer) VerifyAirlineRegistration(context.Context, *OTPRequest) (*AirlineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAirlineRegistration not implemented")
}
func (UnimplementedAdminAirlineServer) AdminVerifyAirline(context.Context, *EmptyRequest) (*AirlineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminVerifyAirline not implemented")
}
func (UnimplementedAdminAirlineServer) RegisterAirlineSeat(context.Context, *AirlineSeatRequest) (*AirlineSeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAirlineSeat not implemented")
}
func (UnimplementedAdminAirlineServer) FetchAllAirlineSeats(context.Context, *EmptyRequest) (*AirlineSeatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAllAirlineSeats not implemented")
}
func (UnimplementedAdminAirlineServer) FetchAirlineSeat(context.Context, *IDRequest) (*AirlineSeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAirlineSeat not implemented")
}
func (UnimplementedAdminAirlineServer) UpdateAirlineSeat(context.Context, *AirlineSeatRequest) (*AirlineSeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAirlineSeat not implemented")
}
func (UnimplementedAdminAirlineServer) DeleteAirlineSeat(context.Context, *IDRequest) (*AirlineSeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAirlineSeat not implemented")
}
func (UnimplementedAdminAirlineServer) RegisterAirlineBaggage(context.Context, *AirlineBaggageRequest) (*AirlineBaggageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAirlineBaggage not implemented")
}
func (UnimplementedAdminAirlineServer) FetchAllAirlineBaggages(context.Context, *EmptyRequest) (*AirlineBaggagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAllAirlineBaggages not implemented")
}
func (UnimplementedAdminAirlineServer) FetchAirlineBaggage(context.Context, *IDRequest) (*AirlineBaggageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAirlineBaggage not implemented")
}
func (UnimplementedAdminAirlineServer) UpdateAirlineBaggage(context.Context, *AirlineBaggageRequest) (*AirlineBaggageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAirlineBaggage not implemented")
}
func (UnimplementedAdminAirlineServer) DeleteAirlineBaggage(context.Context, *IDRequest) (*AirlineBaggageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAirlineBaggage not implemented")
}
func (UnimplementedAdminAirlineServer) RegisterAirlineCancellation(context.Context, *AirlineCancellationRequest) (*AirlineCancellationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAirlineCancellation not implemented")
}
func (UnimplementedAdminAirlineServer) FetchAllAirlineCancellations(context.Context, *EmptyRequest) (*AirlineCancellationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAllAirlineCancellations not implemented")
}
func (UnimplementedAdminAirlineServer) FetchAirlineCancellation(context.Context, *IDRequest) (*AirlineCancellationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAirlineCancellation not implemented")
}
func (UnimplementedAdminAirlineServer) UpdateAirlineCancellation(context.Context, *AirlineCancellationRequest) (*AirlineCancellationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAirlineCancellation not implemented")
}
func (UnimplementedAdminAirlineServer) DeleteAirlineCancellation(context.Context, *IDRequest) (*AirlineCancellationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAirlineCancellation not implemented")
}
func (UnimplementedAdminAirlineServer) RegisterAirportRequest(context.Context, *Airport) (*AirportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAirportRequest not implemented")
}
func (UnimplementedAdminAirlineServer) RegisterScheduleRequest(context.Context, *ScheduleRequest) (*ScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterScheduleRequest not implemented")
}
func (UnimplementedAdminAirlineServer) RegisterLoginRequest(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterLoginRequest not implemented")
}
func (UnimplementedAdminAirlineServer) RegisterForgotPasswordRequest(context.Context, *ForgotPasswordRequest) (*OtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterForgotPasswordRequest not implemented")
}
func (UnimplementedAdminAirlineServer) RegisterVerifyOTPRequest(context.Context, *OTPRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterVerifyOTPRequest not implemented")
}
func (UnimplementedAdminAirlineServer) RegisterConfirmPasswordRequest(context.Context, *ConfirmPasswordRequest) (*EmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterConfirmPasswordRequest not implemented")
}
func (UnimplementedAdminAirlineServer) RegisterFlightFleets(context.Context, *FlightFleetRequest) (*FlightFleetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterFlightFleets not implemented")
}
func (UnimplementedAdminAirlineServer) RegisterFlightChart(context.Context, *FlightChartRequest) (*FlightChartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterFlightChart not implemented")
}
func (UnimplementedAdminAirlineServer) mustEmbedUnimplementedAdminAirlineServer() {}

// UnsafeAdminAirlineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminAirlineServer will
// result in compilation errors.
type UnsafeAdminAirlineServer interface {
	mustEmbedUnimplementedAdminAirlineServer()
}

func RegisterAdminAirlineServer(s grpc.ServiceRegistrar, srv AdminAirlineServer) {
	s.RegisterService(&AdminAirline_ServiceDesc, srv)
}

func _AdminAirline_RegisterFlightType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlightTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).RegisterFlightType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminAirline/RegisterFlightType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).RegisterFlightType(ctx, req.(*FlightTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAirline_FetchAllFlightTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).FetchAllFlightTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminAirline/FetchAllFlightTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).FetchAllFlightTypes(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAirline_FetchFlightType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).FetchFlightType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminAirline/FetchFlightType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).FetchFlightType(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAirline_UpdateFlightType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlightTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).UpdateFlightType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminAirline/UpdateFlightType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).UpdateFlightType(ctx, req.(*FlightTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAirline_DeleteFlightType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).DeleteFlightType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminAirline/DeleteFlightType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).DeleteFlightType(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAirline_RegisterAirline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AirlineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).RegisterAirline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminAirline/RegisterAirline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).RegisterAirline(ctx, req.(*AirlineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAirline_FetchAllAirlines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).FetchAllAirlines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminAirline/FetchAllAirlines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).FetchAllAirlines(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAirline_FetchAirline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).FetchAirline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminAirline/FetchAirline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).FetchAirline(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAirline_UpdateAirline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AirlineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).UpdateAirline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminAirline/UpdateAirline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).UpdateAirline(ctx, req.(*AirlineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAirline_DeleteAirline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).DeleteAirline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminAirline/DeleteAirline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).DeleteAirline(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAirline_VerifyAirlineRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).VerifyAirlineRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminAirline/VerifyAirlineRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).VerifyAirlineRegistration(ctx, req.(*OTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAirline_AdminVerifyAirline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).AdminVerifyAirline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminAirline/AdminVerifyAirline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).AdminVerifyAirline(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAirline_RegisterAirlineSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AirlineSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).RegisterAirlineSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminAirline/RegisterAirlineSeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).RegisterAirlineSeat(ctx, req.(*AirlineSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAirline_FetchAllAirlineSeats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).FetchAllAirlineSeats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminAirline/FetchAllAirlineSeats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).FetchAllAirlineSeats(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAirline_FetchAirlineSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).FetchAirlineSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminAirline/FetchAirlineSeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).FetchAirlineSeat(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAirline_UpdateAirlineSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AirlineSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).UpdateAirlineSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminAirline/UpdateAirlineSeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).UpdateAirlineSeat(ctx, req.(*AirlineSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAirline_DeleteAirlineSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).DeleteAirlineSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminAirline/DeleteAirlineSeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).DeleteAirlineSeat(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAirline_RegisterAirlineBaggage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AirlineBaggageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).RegisterAirlineBaggage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminAirline/RegisterAirlineBaggage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).RegisterAirlineBaggage(ctx, req.(*AirlineBaggageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAirline_FetchAllAirlineBaggages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).FetchAllAirlineBaggages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminAirline/FetchAllAirlineBaggages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).FetchAllAirlineBaggages(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAirline_FetchAirlineBaggage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).FetchAirlineBaggage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminAirline/FetchAirlineBaggage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).FetchAirlineBaggage(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAirline_UpdateAirlineBaggage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AirlineBaggageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).UpdateAirlineBaggage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminAirline/UpdateAirlineBaggage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).UpdateAirlineBaggage(ctx, req.(*AirlineBaggageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAirline_DeleteAirlineBaggage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).DeleteAirlineBaggage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminAirline/DeleteAirlineBaggage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).DeleteAirlineBaggage(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAirline_RegisterAirlineCancellation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AirlineCancellationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).RegisterAirlineCancellation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminAirline/RegisterAirlineCancellation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).RegisterAirlineCancellation(ctx, req.(*AirlineCancellationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAirline_FetchAllAirlineCancellations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).FetchAllAirlineCancellations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminAirline/FetchAllAirlineCancellations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).FetchAllAirlineCancellations(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAirline_FetchAirlineCancellation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).FetchAirlineCancellation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminAirline/FetchAirlineCancellation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).FetchAirlineCancellation(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAirline_UpdateAirlineCancellation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AirlineCancellationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).UpdateAirlineCancellation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminAirline/UpdateAirlineCancellation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).UpdateAirlineCancellation(ctx, req.(*AirlineCancellationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAirline_DeleteAirlineCancellation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).DeleteAirlineCancellation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminAirline/DeleteAirlineCancellation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).DeleteAirlineCancellation(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAirline_RegisterAirportRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Airport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).RegisterAirportRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminAirline/RegisterAirportRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).RegisterAirportRequest(ctx, req.(*Airport))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAirline_RegisterScheduleRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).RegisterScheduleRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminAirline/RegisterScheduleRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).RegisterScheduleRequest(ctx, req.(*ScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAirline_RegisterLoginRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).RegisterLoginRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminAirline/RegisterLoginRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).RegisterLoginRequest(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAirline_RegisterForgotPasswordRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgotPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).RegisterForgotPasswordRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminAirline/RegisterForgotPasswordRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).RegisterForgotPasswordRequest(ctx, req.(*ForgotPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAirline_RegisterVerifyOTPRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).RegisterVerifyOTPRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminAirline/RegisterVerifyOTPRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).RegisterVerifyOTPRequest(ctx, req.(*OTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAirline_RegisterConfirmPasswordRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).RegisterConfirmPasswordRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminAirline/RegisterConfirmPasswordRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).RegisterConfirmPasswordRequest(ctx, req.(*ConfirmPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAirline_RegisterFlightFleets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlightFleetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).RegisterFlightFleets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminAirline/RegisterFlightFleets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).RegisterFlightFleets(ctx, req.(*FlightFleetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAirline_RegisterFlightChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlightChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAirlineServer).RegisterFlightChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminAirline/RegisterFlightChart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAirlineServer).RegisterFlightChart(ctx, req.(*FlightChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminAirline_ServiceDesc is the grpc.ServiceDesc for AdminAirline service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminAirline_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AdminAirline",
	HandlerType: (*AdminAirlineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterFlightType",
			Handler:    _AdminAirline_RegisterFlightType_Handler,
		},
		{
			MethodName: "FetchAllFlightTypes",
			Handler:    _AdminAirline_FetchAllFlightTypes_Handler,
		},
		{
			MethodName: "FetchFlightType",
			Handler:    _AdminAirline_FetchFlightType_Handler,
		},
		{
			MethodName: "UpdateFlightType",
			Handler:    _AdminAirline_UpdateFlightType_Handler,
		},
		{
			MethodName: "DeleteFlightType",
			Handler:    _AdminAirline_DeleteFlightType_Handler,
		},
		{
			MethodName: "RegisterAirline",
			Handler:    _AdminAirline_RegisterAirline_Handler,
		},
		{
			MethodName: "FetchAllAirlines",
			Handler:    _AdminAirline_FetchAllAirlines_Handler,
		},
		{
			MethodName: "FetchAirline",
			Handler:    _AdminAirline_FetchAirline_Handler,
		},
		{
			MethodName: "UpdateAirline",
			Handler:    _AdminAirline_UpdateAirline_Handler,
		},
		{
			MethodName: "DeleteAirline",
			Handler:    _AdminAirline_DeleteAirline_Handler,
		},
		{
			MethodName: "VerifyAirlineRegistration",
			Handler:    _AdminAirline_VerifyAirlineRegistration_Handler,
		},
		{
			MethodName: "AdminVerifyAirline",
			Handler:    _AdminAirline_AdminVerifyAirline_Handler,
		},
		{
			MethodName: "RegisterAirlineSeat",
			Handler:    _AdminAirline_RegisterAirlineSeat_Handler,
		},
		{
			MethodName: "FetchAllAirlineSeats",
			Handler:    _AdminAirline_FetchAllAirlineSeats_Handler,
		},
		{
			MethodName: "FetchAirlineSeat",
			Handler:    _AdminAirline_FetchAirlineSeat_Handler,
		},
		{
			MethodName: "UpdateAirlineSeat",
			Handler:    _AdminAirline_UpdateAirlineSeat_Handler,
		},
		{
			MethodName: "DeleteAirlineSeat",
			Handler:    _AdminAirline_DeleteAirlineSeat_Handler,
		},
		{
			MethodName: "RegisterAirlineBaggage",
			Handler:    _AdminAirline_RegisterAirlineBaggage_Handler,
		},
		{
			MethodName: "FetchAllAirlineBaggages",
			Handler:    _AdminAirline_FetchAllAirlineBaggages_Handler,
		},
		{
			MethodName: "FetchAirlineBaggage",
			Handler:    _AdminAirline_FetchAirlineBaggage_Handler,
		},
		{
			MethodName: "UpdateAirlineBaggage",
			Handler:    _AdminAirline_UpdateAirlineBaggage_Handler,
		},
		{
			MethodName: "DeleteAirlineBaggage",
			Handler:    _AdminAirline_DeleteAirlineBaggage_Handler,
		},
		{
			MethodName: "RegisterAirlineCancellation",
			Handler:    _AdminAirline_RegisterAirlineCancellation_Handler,
		},
		{
			MethodName: "FetchAllAirlineCancellations",
			Handler:    _AdminAirline_FetchAllAirlineCancellations_Handler,
		},
		{
			MethodName: "FetchAirlineCancellation",
			Handler:    _AdminAirline_FetchAirlineCancellation_Handler,
		},
		{
			MethodName: "UpdateAirlineCancellation",
			Handler:    _AdminAirline_UpdateAirlineCancellation_Handler,
		},
		{
			MethodName: "DeleteAirlineCancellation",
			Handler:    _AdminAirline_DeleteAirlineCancellation_Handler,
		},
		{
			MethodName: "RegisterAirportRequest",
			Handler:    _AdminAirline_RegisterAirportRequest_Handler,
		},
		{
			MethodName: "RegisterScheduleRequest",
			Handler:    _AdminAirline_RegisterScheduleRequest_Handler,
		},
		{
			MethodName: "RegisterLoginRequest",
			Handler:    _AdminAirline_RegisterLoginRequest_Handler,
		},
		{
			MethodName: "RegisterForgotPasswordRequest",
			Handler:    _AdminAirline_RegisterForgotPasswordRequest_Handler,
		},
		{
			MethodName: "RegisterVerifyOTPRequest",
			Handler:    _AdminAirline_RegisterVerifyOTPRequest_Handler,
		},
		{
			MethodName: "RegisterConfirmPasswordRequest",
			Handler:    _AdminAirline_RegisterConfirmPasswordRequest_Handler,
		},
		{
			MethodName: "RegisterFlightFleets",
			Handler:    _AdminAirline_RegisterFlightFleets_Handler,
		},
		{
			MethodName: "RegisterFlightChart",
			Handler:    _AdminAirline_RegisterFlightChart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin_airline.proto",
}
